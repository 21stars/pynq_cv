-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddWeighted is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    src1_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src1_data_stream_V_empty_n : IN STD_LOGIC;
    src1_data_stream_V_read : OUT STD_LOGIC;
    src2_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src2_data_stream_V_empty_n : IN STD_LOGIC;
    src2_data_stream_V_read : OUT STD_LOGIC;
    dst_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    dst_rows_V_empty_n : IN STD_LOGIC;
    dst_rows_V_read : OUT STD_LOGIC;
    dst_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    dst_cols_V_empty_n : IN STD_LOGIC;
    dst_cols_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC;
    dst_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    dst_rows_V_out_full_n : IN STD_LOGIC;
    dst_rows_V_out_write : OUT STD_LOGIC;
    dst_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    dst_cols_V_out_full_n : IN STD_LOGIC;
    dst_cols_V_out_write : OUT STD_LOGIC );
end;


architecture behav of AddWeighted is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_9 : STD_LOGIC_VECTOR (11 downto 0) := "000000001001";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal src1_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln355_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal src2_data_stream_V_blk_n : STD_LOGIC;
    signal dst_rows_V_blk_n : STD_LOGIC;
    signal dst_cols_V_blk_n : STD_LOGIC;
    signal dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal icmp_ln355_reg_1093_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_rows_V_out_blk_n : STD_LOGIC;
    signal dst_cols_V_out_blk_n : STD_LOGIC;
    signal t_V_4_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_V_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_V_reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_V_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_V_reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln354_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln355_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln355_reg_1093_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_reg_1093_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_reg_1102 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_reg_1107 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_1122 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_i_i_reg_1127 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t1_reg_1132 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t2_reg_1137 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_i_reg_1142 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1147 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln833_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln837_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln837_reg_1158 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1164 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_25_fu_659_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_25_reg_1170 : STD_LOGIC_VECTOR (7 downto 0);
    signal underflow_fu_963_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1176 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln658_1_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln658_1_reg_1182 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal t_V_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_V_fu_298_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal cols_V_fu_302_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_22_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_339_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_5_fu_349_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_1_i_fu_381_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_21_fu_389_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_20_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_393_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_365_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_377_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_413_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln581_fu_425_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_6_fu_431_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_399_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_64_fu_463_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln581_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_479_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_483_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_65_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln581_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln585_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_fu_489_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln588_fu_501_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln591_fu_529_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln591_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln591_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_23_fu_515_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_fu_547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_563_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_24_fu_567_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_fu_573_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_555_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln582_fu_587_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln403_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_3_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln403_fu_613_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln581_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_509_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln403_3_fu_633_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln603_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_5_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_fu_691_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos2_fu_701_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_69_fu_725_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln618_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln623_fu_739_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln623_fu_743_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal lD_fu_749_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_3_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln621_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_765_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln631_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln631_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln619_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln635_fu_791_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_3_fu_795_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal r_V_fu_801_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln631_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln631_fu_813_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_3_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln641_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_3_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln639_3_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln642_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln639_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln642_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln639_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln642_fu_887_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln645_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln641_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln642_3_fu_903_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_6_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln639_fu_895_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln639_3_fu_911_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln654_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_23_fu_711_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_4_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln557_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_111_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_5_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln658_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_919_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln428_3_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln428_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln571_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln428_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_4_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_3_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_1_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_1008_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln571_fu_1041_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_273_ce : STD_LOGIC;
    signal grp_fu_277_ce : STD_LOGIC;
    signal grp_fu_282_ce : STD_LOGIC;
    signal grp_fu_287_ce : STD_LOGIC;
    signal grp_fu_292_ce : STD_LOGIC;
    signal grp_fu_295_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component sobel_accel_dadd_udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_accel_dmul_vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_accel_uitodwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    sobel_accel_dadd_udo_U87 : component sobel_accel_dadd_udo
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t1_reg_1132,
        din1 => t2_reg_1137,
        ce => grp_fu_273_ce,
        dout => grp_fu_273_p2);

    sobel_accel_dadd_udo_U88 : component sobel_accel_dadd_udo
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_i_i_reg_1142,
        din1 => ap_const_lv64_0,
        ce => grp_fu_277_ce,
        dout => grp_fu_277_p2);

    sobel_accel_dmul_vdy_U89 : component sobel_accel_dmul_vdy
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_reg_1122,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_282_ce,
        dout => grp_fu_282_p2);

    sobel_accel_dmul_vdy_U90 : component sobel_accel_dmul_vdy
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_i_i_reg_1127,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => grp_fu_287_ce,
        dout => grp_fu_287_p2);

    sobel_accel_uitodwdI_U91 : component sobel_accel_uitodwdI
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        ce => grp_fu_292_ce,
        dout => grp_fu_292_p1);

    sobel_accel_uitodwdI_U92 : component sobel_accel_uitodwdI
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_295_p0,
        ce => grp_fu_295_ce,
        dout => grp_fu_295_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln354_fu_306_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln354_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                elsif (((icmp_ln354_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_4_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln355_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_4_reg_262 <= j_V_fu_322_p2;
            elsif (((icmp_ln354_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_4_reg_262 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                t_V_reg_251 <= i_V_reg_1088;
            elsif ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_251 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_V_reg_1079 <= cols_V_fu_302_p1;
                rows_V_reg_1074 <= rows_V_fu_298_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_1088 <= i_V_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln355_reg_1093 <= icmp_ln355_fu_317_p2;
                icmp_ln355_reg_1093_pp0_iter1_reg <= icmp_ln355_reg_1093;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln355_reg_1093_pp0_iter10_reg <= icmp_ln355_reg_1093_pp0_iter9_reg;
                icmp_ln355_reg_1093_pp0_iter11_reg <= icmp_ln355_reg_1093_pp0_iter10_reg;
                icmp_ln355_reg_1093_pp0_iter12_reg <= icmp_ln355_reg_1093_pp0_iter11_reg;
                icmp_ln355_reg_1093_pp0_iter13_reg <= icmp_ln355_reg_1093_pp0_iter12_reg;
                icmp_ln355_reg_1093_pp0_iter14_reg <= icmp_ln355_reg_1093_pp0_iter13_reg;
                icmp_ln355_reg_1093_pp0_iter15_reg <= icmp_ln355_reg_1093_pp0_iter14_reg;
                icmp_ln355_reg_1093_pp0_iter16_reg <= icmp_ln355_reg_1093_pp0_iter15_reg;
                icmp_ln355_reg_1093_pp0_iter17_reg <= icmp_ln355_reg_1093_pp0_iter16_reg;
                icmp_ln355_reg_1093_pp0_iter18_reg <= icmp_ln355_reg_1093_pp0_iter17_reg;
                icmp_ln355_reg_1093_pp0_iter19_reg <= icmp_ln355_reg_1093_pp0_iter18_reg;
                icmp_ln355_reg_1093_pp0_iter20_reg <= icmp_ln355_reg_1093_pp0_iter19_reg;
                icmp_ln355_reg_1093_pp0_iter21_reg <= icmp_ln355_reg_1093_pp0_iter20_reg;
                icmp_ln355_reg_1093_pp0_iter2_reg <= icmp_ln355_reg_1093_pp0_iter1_reg;
                icmp_ln355_reg_1093_pp0_iter3_reg <= icmp_ln355_reg_1093_pp0_iter2_reg;
                icmp_ln355_reg_1093_pp0_iter4_reg <= icmp_ln355_reg_1093_pp0_iter3_reg;
                icmp_ln355_reg_1093_pp0_iter5_reg <= icmp_ln355_reg_1093_pp0_iter4_reg;
                icmp_ln355_reg_1093_pp0_iter6_reg <= icmp_ln355_reg_1093_pp0_iter5_reg;
                icmp_ln355_reg_1093_pp0_iter7_reg <= icmp_ln355_reg_1093_pp0_iter6_reg;
                icmp_ln355_reg_1093_pp0_iter8_reg <= icmp_ln355_reg_1093_pp0_iter7_reg;
                icmp_ln355_reg_1093_pp0_iter9_reg <= icmp_ln355_reg_1093_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln355_reg_1093_pp0_iter20_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln571_reg_1164 <= icmp_ln571_fu_407_p2;
                icmp_ln833_reg_1152 <= icmp_ln833_fu_353_p2;
                icmp_ln837_reg_1158 <= icmp_ln837_fu_359_p2;
                or_ln658_1_reg_1182 <= or_ln658_1_fu_977_p2;
                p_Val2_25_reg_1170 <= p_Val2_25_fu_659_p3;
                underflow_reg_1176 <= underflow_fu_963_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln355_reg_1093_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_reg_1147 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln355_reg_1093_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                t1_reg_1132 <= grp_fu_282_p2;
                t2_reg_1137 <= grp_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln355_reg_1093 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_62_reg_1107 <= src2_data_stream_V_dout;
                tmp_reg_1102 <= src1_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln355_reg_1093_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_8_i_i_reg_1127 <= grp_fu_295_p1;
                tmp_i_i_reg_1122 <= grp_fu_292_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln355_reg_1093_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_9_i_i_reg_1142 <= grp_fu_273_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter22, icmp_ln354_fu_306_p2, ap_CS_fsm_state2, icmp_ln355_fu_317_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter21)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln354_fu_306_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln355_fu_317_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln355_fu_317_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    F2_6_fu_431_p3 <= 
        F2_fu_413_p2 when (icmp_ln581_fu_419_p2(0) = '1') else 
        sub_ln581_fu_425_p2;
    F2_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_377_p1));
    Range1_all_ones_3_fu_759_p2 <= (icmp_ln621_fu_719_p2 and and_ln621_fu_753_p2);
    Range1_all_ones_fu_827_p2 <= (select_ln631_fu_813_p3 and Range1_all_ones_3_fu_759_p2);
    Range1_all_zeros_3_fu_857_p2 <= "1" when (p_Val2_s_fu_399_p3 = ap_const_lv54_0) else "0";
    Range1_all_zeros_fu_839_p2 <= (ap_const_lv1_1 xor Range1_all_ones_3_fu_759_p2);
    Range2_V_3_fu_795_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_s_fu_399_p3),to_integer(unsigned('0' & zext_ln635_fu_791_p1(31-1 downto 0)))));
    Range2_all_ones_fu_807_p2 <= "1" when (Range2_V_3_fu_795_p2 = r_V_fu_801_p2) else "0";
    add_ln591_fu_529_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(F2_fu_413_p2));
    and_ln340_1_fu_1059_p2 <= (xor_ln571_fu_1053_p2 and or_ln340_fu_1002_p2);
    and_ln340_fu_992_p2 <= (xor_ln340_fu_987_p2 and or_ln658_1_reg_1182);
    and_ln403_3_fu_627_p2 <= (xor_ln403_fu_621_p2 and and_ln581_fu_601_p2);
    and_ln403_fu_607_p2 <= (p_Result_22_fu_555_p3 and and_ln581_fu_601_p2);
    and_ln428_3_fu_1015_p2 <= (icmp_ln837_reg_1158 and icmp_ln833_reg_1152);
    and_ln428_fu_983_p2 <= (icmp_ln837_reg_1158 and icmp_ln833_reg_1152);
    and_ln557_fu_957_p2 <= (p_Result_20_fu_369_p3 and icmp_ln621_fu_719_p2);
    and_ln571_fu_1025_p2 <= (xor_ln428_fu_1019_p2 and icmp_ln571_reg_1164);
    and_ln581_fu_601_p2 <= (xor_ln582_fu_595_p2 and icmp_ln581_fu_419_p2);
    and_ln603_5_fu_679_p2 <= (xor_ln416_fu_581_p2 and or_ln603_fu_673_p2);
    and_ln603_6_fu_685_p2 <= (and_ln603_5_fu_679_p2 and and_ln403_fu_607_p2);
    and_ln603_fu_653_p2 <= (xor_ln581_fu_647_p2 and icmp_ln603_fu_473_p2);
    and_ln621_4_fu_945_p2 <= (xor_ln621_fu_939_p2 and p_Result_23_fu_711_p3);
    and_ln621_5_fu_951_p2 <= (p_Result_20_fu_369_p3 and and_ln621_4_fu_945_p2);
    and_ln621_fu_753_p2 <= (xor_ln621_3_fu_733_p2 and lD_fu_749_p1);
    and_ln631_fu_785_p2 <= (xor_ln631_fu_773_p2 and icmp_ln631_fu_779_p2);
    and_ln639_fu_821_p2 <= (xor_ln621_3_fu_733_p2 and icmp_ln631_fu_779_p2);
    and_ln641_fu_845_p2 <= (icmp_ln641_fu_833_p2 and Range1_all_zeros_fu_839_p2);
    and_ln642_fu_881_p2 <= (or_ln639_fu_875_p2 and icmp_ln642_fu_851_p2);
    and_ln654_fu_927_p2 <= (select_ln639_fu_895_p3 and and_ln603_6_fu_685_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src1_data_stream_V_empty_n, src2_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln355_reg_1093, ap_enable_reg_pp0_iter22, icmp_ln355_reg_1093_pp0_iter21_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln355_reg_1093_pp0_iter21_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln355_reg_1093 = ap_const_lv1_0) and (src2_data_stream_V_empty_n = ap_const_logic_0)) or ((icmp_ln355_reg_1093 = ap_const_lv1_0) and (src1_data_stream_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src1_data_stream_V_empty_n, src2_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln355_reg_1093, ap_enable_reg_pp0_iter22, icmp_ln355_reg_1093_pp0_iter21_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln355_reg_1093_pp0_iter21_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln355_reg_1093 = ap_const_lv1_0) and (src2_data_stream_V_empty_n = ap_const_logic_0)) or ((icmp_ln355_reg_1093 = ap_const_lv1_0) and (src1_data_stream_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src1_data_stream_V_empty_n, src2_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln355_reg_1093, ap_enable_reg_pp0_iter22, icmp_ln355_reg_1093_pp0_iter21_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln355_reg_1093_pp0_iter21_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln355_reg_1093 = ap_const_lv1_0) and (src2_data_stream_V_empty_n = ap_const_logic_0)) or ((icmp_ln355_reg_1093 = ap_const_lv1_0) and (src1_data_stream_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n)
    begin
                ap_block_state1 <= ((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_pp0_stage0_iter22_assign_proc : process(dst_data_stream_V_full_n, icmp_ln355_reg_1093_pp0_iter21_reg)
    begin
                ap_block_state25_pp0_stage0_iter22 <= ((icmp_ln355_reg_1093_pp0_iter21_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src1_data_stream_V_empty_n, src2_data_stream_V_empty_n, icmp_ln355_reg_1093)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln355_reg_1093 = ap_const_lv1_0) and (src2_data_stream_V_empty_n = ap_const_logic_0)) or ((icmp_ln355_reg_1093 = ap_const_lv1_0) and (src1_data_stream_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln355_fu_317_p2)
    begin
        if ((icmp_ln355_fu_317_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln354_fu_306_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln354_fu_306_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    ashr_ln586_fu_483_p2 <= std_logic_vector(shift_right(signed(p_Val2_s_fu_399_p3),to_integer(unsigned('0' & zext_ln586_fu_479_p1(31-1 downto 0)))));
    ashr_ln623_fu_743_p2 <= std_logic_vector(shift_right(signed(p_Val2_s_fu_399_p3),to_integer(unsigned('0' & zext_ln623_fu_739_p1(31-1 downto 0)))));
    cols_V_fu_302_p0 <= dst_cols_V_dout;
        cols_V_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cols_V_fu_302_p0),32));

    deleted_zeros_fu_919_p3 <= 
        select_ln639_fu_895_p3 when (and_ln603_6_fu_685_p2(0) = '1') else 
        select_ln639_3_fu_911_p3;

    dst_cols_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_cols_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_cols_V_blk_n <= dst_cols_V_empty_n;
        else 
            dst_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_cols_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_cols_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_cols_V_out_blk_n <= dst_cols_V_out_full_n;
        else 
            dst_cols_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_cols_V_out_din <= dst_cols_V_dout;

    dst_cols_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n)
    begin
        if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_cols_V_out_write <= ap_const_logic_1;
        else 
            dst_cols_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_cols_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n)
    begin
        if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_cols_V_read <= ap_const_logic_1;
        else 
            dst_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_V_blk_n_assign_proc : process(dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter22, icmp_ln355_reg_1093_pp0_iter21_reg)
    begin
        if (((icmp_ln355_reg_1093_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1))) then 
            dst_data_stream_V_blk_n <= dst_data_stream_V_full_n;
        else 
            dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_V_din <= 
        select_ln340_fu_1008_p3 when (and_ln340_1_fu_1059_p2(0) = '1') else 
        select_ln571_fu_1041_p3;

    dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter22, icmp_ln355_reg_1093_pp0_iter21_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln355_reg_1093_pp0_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_rows_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_rows_V_blk_n <= dst_rows_V_empty_n;
        else 
            dst_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_rows_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_rows_V_out_blk_n <= dst_rows_V_out_full_n;
        else 
            dst_rows_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_rows_V_out_din <= dst_rows_V_dout;

    dst_rows_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n)
    begin
        if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_rows_V_out_write <= ap_const_logic_1;
        else 
            dst_rows_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_rows_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dst_rows_V_empty_n, dst_cols_V_empty_n, dst_rows_V_out_full_n, dst_cols_V_out_full_n)
    begin
        if ((not(((dst_cols_V_out_full_n = ap_const_logic_0) or (dst_rows_V_out_full_n = ap_const_logic_0) or (dst_cols_V_empty_n = ap_const_logic_0) or (dst_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_rows_V_read <= ap_const_logic_1;
        else 
            dst_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_111_fu_933_p2 <= (ap_const_lv1_1 xor and_ln654_fu_927_p2);

    grp_fu_273_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_273_ce <= ap_const_logic_1;
        else 
            grp_fu_273_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_277_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_277_ce <= ap_const_logic_1;
        else 
            grp_fu_277_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_282_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_282_ce <= ap_const_logic_1;
        else 
            grp_fu_282_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_287_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_287_ce <= ap_const_logic_1;
        else 
            grp_fu_287_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_292_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_292_ce <= ap_const_logic_1;
        else 
            grp_fu_292_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_292_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1102),32));

    grp_fu_295_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_295_ce <= ap_const_logic_1;
        else 
            grp_fu_295_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_295_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_reg_1107),32));
    i_V_fu_311_p2 <= std_logic_vector(unsigned(t_V_reg_251) + unsigned(ap_const_lv32_1));
    icmp_ln354_fu_306_p2 <= "1" when (t_V_reg_251 = rows_V_reg_1074) else "0";
    icmp_ln355_fu_317_p2 <= "1" when (t_V_4_reg_262 = cols_V_reg_1079) else "0";
    icmp_ln571_fu_407_p2 <= "1" when (trunc_ln556_fu_365_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_419_p2 <= "1" when (signed(F2_fu_413_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln582_fu_447_p2 <= "1" when (tmp_V_fu_339_p4 = ap_const_lv11_433) else "0";
    icmp_ln585_fu_457_p2 <= "1" when (unsigned(F2_6_fu_431_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln591_fu_523_p2 <= "1" when (signed(F2_fu_413_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_473_p2 <= "1" when (tmp_64_fu_463_p4 = ap_const_lv9_0) else "0";
    icmp_ln621_fu_719_p2 <= "1" when (signed(pos1_fu_691_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln631_fu_779_p2 <= "1" when (signed(pos2_fu_701_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln641_fu_833_p2 <= "1" when (Range2_V_3_fu_795_p2 = ap_const_lv54_0) else "0";
    icmp_ln642_fu_851_p2 <= "1" when (pos2_fu_701_p2 = ap_const_lv12_36) else "0";
    icmp_ln833_fu_353_p2 <= "1" when (tmp_V_fu_339_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln837_fu_359_p2 <= "0" when (tmp_V_5_fu_349_p1 = ap_const_lv52_0) else "1";

    internal_ap_ready_assign_proc : process(icmp_ln354_fu_306_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln354_fu_306_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_322_p2 <= std_logic_vector(unsigned(t_V_4_reg_262) + unsigned(ap_const_lv32_1));
    lD_fu_749_p1 <= ashr_ln623_fu_743_p2(1 - 1 downto 0);
    man_V_1_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_21_fu_389_p1));
    or_ln340_fu_1002_p2 <= (xor_ln340_fu_987_p2 or xor_ln340_1_fu_997_p2);
    or_ln571_3_fu_1048_p2 <= (icmp_ln571_reg_1164 or and_ln428_fu_983_p2);
    or_ln571_4_fu_1036_p2 <= (underflow_reg_1176 or or_ln571_fu_1030_p2);
    or_ln571_fu_1030_p2 <= (and_ln571_fu_1025_p2 or and_ln428_fu_983_p2);
    or_ln581_fu_641_p2 <= (icmp_ln582_fu_447_p2 or icmp_ln581_fu_419_p2);
    or_ln603_fu_673_p2 <= (xor_ln603_fu_667_p2 or or_ln581_fu_641_p2);
    or_ln639_fu_875_p2 <= (xor_ln639_3_fu_869_p2 or tmp_69_fu_725_p3);
    or_ln645_fu_863_p2 <= (xor_ln621_3_fu_733_p2 or Range1_all_zeros_3_fu_857_p2);
    or_ln658_1_fu_977_p2 <= (or_ln658_fu_971_p2 or deleted_zeros_fu_919_p3);
    or_ln658_fu_971_p2 <= (xor_ln621_fu_939_p2 or p_Result_20_fu_369_p3);
    p_Result_20_fu_369_p3 <= p_Val2_22_fu_336_p1(63 downto 63);
    p_Result_21_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_381_p3),54));
    p_Result_22_fu_555_p3 <= p_Val2_23_fu_515_p3(7 downto 7);
    p_Result_23_fu_711_p3 <= p_Val2_25_fu_659_p3(7 downto 7);
    p_Result_s_fu_539_p3 <= p_Val2_s_fu_399_p3(to_integer(unsigned(zext_ln591_fu_535_p1)) downto to_integer(unsigned(zext_ln591_fu_535_p1))) when (to_integer(unsigned(zext_ln591_fu_535_p1))>= 0 and to_integer(unsigned(zext_ln591_fu_535_p1))<=53) else "-";
    p_Val2_22_fu_336_p1 <= sum_reg_1147;
    p_Val2_23_fu_515_p3 <= 
        trunc_ln586_fu_489_p1 when (icmp_ln585_fu_457_p2(0) = '1') else 
        select_ln588_fu_501_p3;
    p_Val2_24_fu_567_p2 <= std_logic_vector(unsigned(p_Val2_23_fu_515_p3) + unsigned(zext_ln415_fu_563_p1));
    p_Val2_25_fu_659_p3 <= 
        shl_ln604_fu_509_p2 when (and_ln603_fu_653_p2(0) = '1') else 
        select_ln403_3_fu_633_p3;
    p_Val2_s_fu_399_p3 <= 
        man_V_1_fu_393_p2 when (p_Result_20_fu_369_p3(0) = '1') else 
        p_Result_21_fu_389_p1;
    pos1_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) + unsigned(F2_fu_413_p2));
    pos2_fu_701_p2 <= std_logic_vector(unsigned(ap_const_lv12_9) + unsigned(F2_fu_413_p2));
    qb_fu_547_p3 <= 
        p_Result_20_fu_369_p3 when (icmp_ln591_fu_523_p2(0) = '1') else 
        p_Result_s_fu_539_p3;
    r_V_fu_801_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln635_fu_791_p1(31-1 downto 0)))));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rows_V_fu_298_p0 <= dst_rows_V_dout;
        rows_V_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rows_V_fu_298_p0),32));

    select_ln340_fu_1008_p3 <= 
        p_Val2_25_reg_1170 when (and_ln340_fu_992_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln403_3_fu_633_p3 <= 
        p_Val2_24_fu_567_p2 when (and_ln403_3_fu_627_p2(0) = '1') else 
        select_ln403_fu_613_p3;
    select_ln403_fu_613_p3 <= 
        p_Val2_24_fu_567_p2 when (and_ln403_fu_607_p2(0) = '1') else 
        select_ln582_fu_587_p3;
    select_ln571_fu_1041_p3 <= 
        ap_const_lv8_0 when (or_ln571_4_fu_1036_p2(0) = '1') else 
        p_Val2_25_reg_1170;
    select_ln582_fu_587_p3 <= 
        trunc_ln583_fu_453_p1 when (icmp_ln582_fu_447_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln588_fu_501_p3 <= 
        ap_const_lv8_FF when (tmp_65_fu_493_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln631_fu_813_p3 <= 
        Range2_all_ones_fu_807_p2 when (and_ln631_fu_785_p2(0) = '1') else 
        xor_ln631_fu_773_p2;
    select_ln639_3_fu_911_p3 <= 
        and_ln641_fu_845_p2 when (and_ln639_fu_821_p2(0) = '1') else 
        select_ln642_3_fu_903_p3;
    select_ln639_fu_895_p3 <= 
        Range1_all_ones_fu_827_p2 when (and_ln639_fu_821_p2(0) = '1') else 
        select_ln642_fu_887_p3;
    select_ln642_3_fu_903_p3 <= 
        Range1_all_zeros_fu_839_p2 when (and_ln642_fu_881_p2(0) = '1') else 
        or_ln645_fu_863_p2;
    select_ln642_fu_887_p3 <= 
        Range1_all_ones_3_fu_759_p2 when (and_ln642_fu_881_p2(0) = '1') else 
        xor_ln621_3_fu_733_p2;
        sext_ln581_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(F2_6_fu_431_p3),32));

        sext_ln618_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos1_fu_691_p2),32));

        sext_ln619_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos2_fu_701_p2),32));

    shl_ln604_fu_509_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_453_p1),to_integer(unsigned('0' & trunc_ln581_fu_439_p1(8-1 downto 0)))));

    src1_data_stream_V_blk_n_assign_proc : process(src1_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln355_reg_1093)
    begin
        if (((icmp_ln355_reg_1093 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src1_data_stream_V_blk_n <= src1_data_stream_V_empty_n;
        else 
            src1_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src1_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln355_reg_1093, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln355_reg_1093 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src1_data_stream_V_read <= ap_const_logic_1;
        else 
            src1_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src2_data_stream_V_blk_n_assign_proc : process(src2_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln355_reg_1093)
    begin
        if (((icmp_ln355_reg_1093 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src2_data_stream_V_blk_n <= src2_data_stream_V_empty_n;
        else 
            src2_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src2_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln355_reg_1093, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln355_reg_1093 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src2_data_stream_V_read <= ap_const_logic_1;
        else 
            src2_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln581_fu_425_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(F2_fu_413_p2));
    tmp_1_i_fu_381_p3 <= (ap_const_lv1_1 & tmp_V_5_fu_349_p1);
    tmp_64_fu_463_p4 <= F2_6_fu_431_p3(11 downto 3);
    tmp_65_fu_493_p3 <= p_Val2_22_fu_336_p1(63 downto 63);
    tmp_67_fu_573_p3 <= p_Val2_24_fu_567_p2(7 downto 7);
    tmp_69_fu_725_p3 <= pos1_fu_691_p2(11 downto 11);
    tmp_70_fu_765_p3 <= pos2_fu_701_p2(11 downto 11);
    tmp_V_5_fu_349_p1 <= p_Val2_22_fu_336_p1(52 - 1 downto 0);
    tmp_V_fu_339_p4 <= p_Val2_22_fu_336_p1(62 downto 52);
    trunc_ln556_fu_365_p1 <= p_Val2_22_fu_336_p1(63 - 1 downto 0);
    trunc_ln581_fu_439_p1 <= F2_6_fu_431_p3(8 - 1 downto 0);
    trunc_ln583_fu_453_p1 <= p_Val2_s_fu_399_p3(8 - 1 downto 0);
    trunc_ln586_fu_489_p1 <= ashr_ln586_fu_483_p2(8 - 1 downto 0);
    underflow_fu_963_p3 <= 
        empty_111_fu_933_p2 when (and_ln557_fu_957_p2(0) = '1') else 
        and_ln621_5_fu_951_p2;
    xor_ln340_1_fu_997_p2 <= (or_ln658_1_reg_1182 xor ap_const_lv1_1);
    xor_ln340_fu_987_p2 <= (underflow_reg_1176 xor ap_const_lv1_1);
    xor_ln403_fu_621_p2 <= (p_Result_22_fu_555_p3 xor ap_const_lv1_1);
    xor_ln416_fu_581_p2 <= (tmp_67_fu_573_p3 xor ap_const_lv1_1);
    xor_ln428_fu_1019_p2 <= (ap_const_lv1_1 xor and_ln428_3_fu_1015_p2);
    xor_ln571_fu_1053_p2 <= (or_ln571_3_fu_1048_p2 xor ap_const_lv1_1);
    xor_ln581_fu_647_p2 <= (or_ln581_fu_641_p2 xor ap_const_lv1_1);
    xor_ln582_fu_595_p2 <= (icmp_ln582_fu_447_p2 xor ap_const_lv1_1);
    xor_ln603_fu_667_p2 <= (icmp_ln603_fu_473_p2 xor ap_const_lv1_1);
    xor_ln621_3_fu_733_p2 <= (tmp_69_fu_725_p3 xor ap_const_lv1_1);
    xor_ln621_fu_939_p2 <= (icmp_ln621_fu_719_p2 xor ap_const_lv1_1);
    xor_ln631_fu_773_p2 <= (tmp_70_fu_765_p3 xor ap_const_lv1_1);
    xor_ln639_3_fu_869_p2 <= (icmp_ln631_fu_779_p2 xor ap_const_lv1_1);
    zext_ln415_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_fu_547_p3),8));
    zext_ln461_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_339_p4),12));
    zext_ln586_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_443_p1),54));
    zext_ln591_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln591_fu_529_p2),32));
    zext_ln623_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln618_fu_697_p1),54));
    zext_ln635_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln619_fu_707_p1),54));
end behav;
