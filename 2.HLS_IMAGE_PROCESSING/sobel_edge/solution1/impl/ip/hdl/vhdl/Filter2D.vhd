-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_dst_data_stream_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_write : OUT STD_LOGIC;
    p_kernel_val_0_V_1_read : IN STD_LOGIC_VECTOR (1 downto 0);
    p_kernel_val_0_V_2_read : IN STD_LOGIC_VECTOR (1 downto 0);
    p_kernel_val_1_V_0_read : IN STD_LOGIC_VECTOR (2 downto 0);
    p_kernel_val_1_V_2_read : IN STD_LOGIC_VECTOR (3 downto 0);
    p_kernel_val_2_V_0_read : IN STD_LOGIC_VECTOR (1 downto 0);
    p_kernel_val_2_V_1_read : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of Filter2D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_43A : STD_LOGIC_VECTOR (10 downto 0) := "10000111010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_438 : STD_LOGIC_VECTOR (11 downto 0) := "010000111000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_FFE : STD_LOGIC_VECTOR (11 downto 0) := "111111111110";
    constant ap_const_lv12_FFD : STD_LOGIC_VECTOR (11 downto 0) := "111111111101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_782 : STD_LOGIC_VECTOR (10 downto 0) := "11110000010";
    constant ap_const_lv12_780 : STD_LOGIC_VECTOR (11 downto 0) := "011110000000";
    constant ap_const_lv13_EFE : STD_LOGIC_VECTOR (12 downto 0) := "0111011111110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln444_reg_1436 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln118_reg_1445 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_1401 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_1392 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal and_ln512_reg_1479 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln512_reg_1479_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_2_reg_317 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_fu_328_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_reg_1353 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_1_fu_332_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_1_reg_1358 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_2_fu_336_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_2_reg_1363 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1118_4_fu_340_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1118_4_reg_1368 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_3_fu_344_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_3_reg_1373 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1118_5_fu_348_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1118_5_reg_1378 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln443_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_362_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_reg_1387 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln887_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln457_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln457_reg_1396 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_1406 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_1410 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_reg_1414 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln493_1_fu_562_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_1_reg_1421 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_2_fu_600_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_2_reg_1426 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_3_fu_638_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_3_reg_1431 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln444_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op158_read_state4 : BOOLEAN;
    signal ap_predicate_op169_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln444_reg_1436_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_654_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln118_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln458_fu_796_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln458_reg_1449 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln457_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln457_reg_1454 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_buf_0_val_3_addr_reg_1461 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_4_addr_reg_1467 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_5_addr_reg_1473 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln512_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_kernel_win_0_va_23_fu_944_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_23_reg_1483 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_24_fu_962_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_24_reg_1490 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1262_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_2_reg_1495 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal k_buf_0_val_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_3_ce0 : STD_LOGIC;
    signal k_buf_0_val_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_3_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_3_ce1 : STD_LOGIC;
    signal k_buf_0_val_3_we1 : STD_LOGIC;
    signal k_buf_0_val_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_4_ce0 : STD_LOGIC;
    signal k_buf_0_val_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_4_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_4_ce1 : STD_LOGIC;
    signal k_buf_0_val_4_we1 : STD_LOGIC;
    signal k_buf_0_val_4_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_5_ce0 : STD_LOGIC;
    signal k_buf_0_val_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_5_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_5_ce1 : STD_LOGIC;
    signal k_buf_0_val_5_we1 : STD_LOGIC;
    signal k_buf_0_val_5_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_reg_306 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln835_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal src_kernel_win_0_va_fu_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_18_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_19_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_20_fu_156 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_21_fu_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_25_fu_980_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_22_fu_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_s_fu_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_buf_0_val_0_0_fu_852_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_14_fu_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_15_fu_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_16_fu_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_buf_0_val_1_0_fu_871_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_17_fu_184 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_18_fu_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_buf_0_val_2_0_fu_890_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_380_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln443_fu_352_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln506_fu_418_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_424_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln118_6_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln142_fu_458_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln139_1_fu_464_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln506_1_fu_482_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln506_2_fu_508_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln147_fu_478_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln144_1_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln507_fu_534_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln506_fu_414_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln118_1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln507_fu_548_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln507_fu_540_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln507_1_fu_554_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln142_fu_504_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln118_fu_574_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_fu_580_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_fu_488_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln139_4_fu_584_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln118_1_fu_568_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln118_fu_592_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln142_2_fu_530_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_fu_522_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln118_7_fu_612_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_2_fu_618_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_fu_514_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln139_5_fu_622_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln118_fu_606_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln118_1_fu_630_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_34_fu_660_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln444_fu_644_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ImagLoc_x_fu_676_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_686_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_1_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln118_8_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_712_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln142_2_fu_720_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln139_fu_726_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln139_1_fu_738_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln451_fu_682_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln147_fu_748_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln118_3_fu_754_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln118_9_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln118_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln144_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln139_fu_734_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln118_fu_762_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_fu_784_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln144_fu_792_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln891_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln493_fu_835_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_840_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_859_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_878_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_933_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_951_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_969_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1118_fu_996_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1118_fu_1000_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1254_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_4_fu_1064_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_4_fu_1064_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln1118_4_fu_1064_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_5_fu_1077_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_5_fu_1077_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln1118_5_fu_1077_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln703_3_fu_1069_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln703_5_fu_1086_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln703_4_fu_1092_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1269_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_6_fu_1096_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln703_6_fu_1096_p2 : signal is "no";
    signal zext_ln703_2_fu_1104_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_1107_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln703_fu_1082_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln703_1_fu_1101_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln703_9_fu_1126_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln703_5_fu_1132_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_8_fu_1121_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 of add_ln703_8_fu_1121_p2 : signal is "no";
    signal p_Val2_5_fu_1136_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_1_fu_1146_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_1154_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_1113_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_6_fu_1142_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln340_1_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_1210_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_1218_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1247_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1247_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1254_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1254_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1247_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1262_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1262_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1269_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1269_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_122 : BOOLEAN;
    signal ap_enable_state3_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_148 : BOOLEAN;
    signal ap_enable_state4_pp0_iter1_stage0 : BOOLEAN;
    signal ap_predicate_op163_store_state4 : BOOLEAN;
    signal ap_enable_operation_163 : BOOLEAN;
    signal ap_predicate_op170_store_state4 : BOOLEAN;
    signal ap_enable_operation_170 : BOOLEAN;
    signal ap_enable_operation_124 : BOOLEAN;
    signal ap_enable_operation_152 : BOOLEAN;
    signal ap_predicate_op161_store_state4 : BOOLEAN;
    signal ap_enable_operation_161 : BOOLEAN;
    signal ap_predicate_op168_store_state4 : BOOLEAN;
    signal ap_enable_operation_168 : BOOLEAN;
    signal ap_enable_operation_126 : BOOLEAN;
    signal ap_enable_operation_155 : BOOLEAN;
    signal ap_predicate_op159_store_state4 : BOOLEAN;
    signal ap_enable_operation_159 : BOOLEAN;
    signal ap_predicate_op167_store_state4 : BOOLEAN;
    signal ap_enable_operation_167 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1247_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1254_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1262_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1269_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_4_fu_1064_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_5_fu_1077_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_condition_947 : BOOLEAN;

    component sobel_accel_mux_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_accel_mac_mpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component sobel_accel_mac_mqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component sobel_accel_mac_mrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component sobel_accel_mac_msc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Filter2D_1_k_buf_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    k_buf_0_val_3_U : component Filter2D_1_k_buf_eOg
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_0_val_3_address0,
        ce0 => k_buf_0_val_3_ce0,
        q0 => k_buf_0_val_3_q0,
        address1 => k_buf_0_val_3_address1,
        ce1 => k_buf_0_val_3_ce1,
        we1 => k_buf_0_val_3_we1,
        d1 => p_src_data_stream_V_dout);

    k_buf_0_val_4_U : component Filter2D_1_k_buf_eOg
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_0_val_4_address0,
        ce0 => k_buf_0_val_4_ce0,
        q0 => k_buf_0_val_4_q0,
        address1 => k_buf_0_val_4_address1,
        ce1 => k_buf_0_val_4_ce1,
        we1 => k_buf_0_val_4_we1,
        d1 => k_buf_0_val_4_d1);

    k_buf_0_val_5_U : component Filter2D_1_k_buf_eOg
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_0_val_5_address0,
        ce0 => k_buf_0_val_5_ce0,
        q0 => k_buf_0_val_5_q0,
        address1 => k_buf_0_val_5_address1,
        ce1 => k_buf_0_val_5_ce1,
        we1 => k_buf_0_val_5_we1,
        d1 => k_buf_0_val_5_d1);

    sobel_accel_mux_3hbi_U54 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => right_border_buf_0_s_fu_168,
        din1 => right_border_buf_0_14_fu_172,
        din2 => ap_const_lv8_0,
        din3 => xor_ln493_fu_835_p2,
        dout => tmp_4_fu_840_p5);

    sobel_accel_mux_3hbi_U55 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => right_border_buf_0_16_fu_180,
        din1 => right_border_buf_0_17_fu_184,
        din2 => ap_const_lv8_0,
        din3 => xor_ln493_fu_835_p2,
        dout => tmp_5_fu_859_p5);

    sobel_accel_mux_3hbi_U56 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => right_border_buf_0_18_fu_188,
        din1 => right_border_buf_0_15_fu_176,
        din2 => ap_const_lv8_0,
        din3 => xor_ln493_fu_835_p2,
        dout => tmp_6_fu_878_p5);

    sobel_accel_mux_3hbi_U57 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => col_buf_0_val_0_0_fu_852_p3,
        din1 => col_buf_0_val_1_0_fu_871_p3,
        din2 => col_buf_0_val_2_0_fu_890_p3,
        din3 => xor_ln493_1_reg_1421,
        dout => tmp_7_fu_933_p5);

    sobel_accel_mux_3hbi_U58 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => col_buf_0_val_0_0_fu_852_p3,
        din1 => col_buf_0_val_1_0_fu_871_p3,
        din2 => col_buf_0_val_2_0_fu_890_p3,
        din3 => xor_ln493_2_reg_1426,
        dout => tmp_8_fu_951_p5);

    sobel_accel_mux_3hbi_U59 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => col_buf_0_val_0_0_fu_852_p3,
        din1 => col_buf_0_val_1_0_fu_871_p3,
        din2 => col_buf_0_val_2_0_fu_890_p3,
        din3 => xor_ln493_3_reg_1431,
        dout => tmp_9_fu_969_p5);

    sobel_accel_mac_mpcA_U60 : component sobel_accel_mac_mpcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 9,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1247_p0,
        din1 => grp_fu_1247_p1,
        din2 => sub_ln1118_fu_1000_p2,
        dout => grp_fu_1247_p3);

    sobel_accel_mac_mqcK_U61 : component sobel_accel_mac_mqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1254_p0,
        din1 => grp_fu_1254_p1,
        din2 => grp_fu_1247_p3,
        dout => grp_fu_1254_p3);

    sobel_accel_mac_mrcU_U62 : component sobel_accel_mac_mrcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_1262_p0,
        din1 => grp_fu_1262_p1,
        din2 => grp_fu_1254_p3,
        dout => grp_fu_1262_p3);

    sobel_accel_mac_msc4_U63 : component sobel_accel_mac_msc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_1269_p0,
        din1 => grp_fu_1269_p1,
        din2 => add_ln703_2_reg_1495,
        dout => grp_fu_1269_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln444_fu_648_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln443_fu_356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln443_fu_356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln443_fu_356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_2_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_2_reg_317 <= j_V_fu_654_p2;
            elsif (((icmp_ln443_fu_356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_2_reg_317 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_306 <= i_V_reg_1387;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_306 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln512_reg_1479) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln703_2_reg_1495 <= grp_fu_1262_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln118_reg_1445 <= and_ln118_fu_706_p2;
                and_ln512_reg_1479 <= and_ln512_fu_812_p2;
                k_buf_0_val_3_addr_reg_1461 <= zext_ln835_fu_805_p1(11 - 1 downto 0);
                k_buf_0_val_4_addr_reg_1467 <= zext_ln835_fu_805_p1(11 - 1 downto 0);
                k_buf_0_val_5_addr_reg_1473 <= zext_ln835_fu_805_p1(11 - 1 downto 0);
                or_ln457_reg_1454 <= or_ln457_fu_800_p2;
                trunc_ln458_reg_1449 <= trunc_ln458_fu_796_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln512_reg_1479_pp0_iter1_reg <= and_ln512_reg_1479;
                icmp_ln444_reg_1436 <= icmp_ln444_fu_648_p2;
                icmp_ln444_reg_1436_pp0_iter1_reg <= icmp_ln444_reg_1436;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_1387 <= i_V_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln443_fu_356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln879_1_reg_1410 <= icmp_ln879_1_fu_402_p2;
                icmp_ln879_reg_1406 <= icmp_ln879_fu_396_p2;
                icmp_ln887_reg_1392 <= icmp_ln887_fu_368_p2;
                icmp_ln899_1_reg_1414 <= icmp_ln899_1_fu_408_p2;
                icmp_ln899_reg_1401 <= icmp_ln899_fu_390_p2;
                xor_ln457_reg_1396 <= xor_ln457_fu_374_p2;
                xor_ln493_1_reg_1421 <= xor_ln493_1_fu_562_p2;
                xor_ln493_2_reg_1426 <= xor_ln493_2_fu_600_p2;
                xor_ln493_3_reg_1431 <= xor_ln493_3_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                right_border_buf_0_14_fu_172 <= right_border_buf_0_s_fu_168;
                right_border_buf_0_15_fu_176 <= right_border_buf_0_18_fu_188;
                right_border_buf_0_16_fu_180 <= col_buf_0_val_1_0_fu_871_p3;
                right_border_buf_0_17_fu_184 <= right_border_buf_0_16_fu_180;
                right_border_buf_0_18_fu_188 <= col_buf_0_val_2_0_fu_890_p3;
                right_border_buf_0_s_fu_168 <= col_buf_0_val_0_0_fu_852_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sext_ln1118_1_reg_1358 <= sext_ln1118_1_fu_332_p1;
                sext_ln1118_2_reg_1363 <= sext_ln1118_2_fu_336_p1;
                sext_ln1118_3_reg_1373 <= sext_ln1118_3_fu_344_p1;
                sext_ln1118_reg_1353 <= sext_ln1118_fu_328_p1;
                    zext_ln1118_4_reg_1368(3 downto 0) <= zext_ln1118_4_fu_340_p1(3 downto 0);
                    zext_ln1118_5_reg_1378(2 downto 0) <= zext_ln1118_5_fu_348_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_reg_1436_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_kernel_win_0_va_18_fu_148 <= src_kernel_win_0_va_fu_144;
                src_kernel_win_0_va_fu_144 <= src_kernel_win_0_va_23_reg_1483;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_kernel_win_0_va_19_fu_152 <= src_kernel_win_0_va_24_fu_962_p3;
                src_kernel_win_0_va_20_fu_156 <= src_kernel_win_0_va_19_fu_152;
                src_kernel_win_0_va_21_fu_160 <= src_kernel_win_0_va_25_fu_980_p3;
                src_kernel_win_0_va_22_fu_164 <= src_kernel_win_0_va_21_fu_160;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_kernel_win_0_va_23_reg_1483 <= src_kernel_win_0_va_23_fu_944_p3;
                src_kernel_win_0_va_24_reg_1490 <= src_kernel_win_0_va_24_fu_962_p3;
            end if;
        end if;
    end process;
    zext_ln1118_4_reg_1368(11 downto 4) <= "00000000";
    zext_ln1118_5_reg_1378(10 downto 3) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln443_fu_356_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln443_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ImagLoc_x_fu_676_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(zext_ln444_fu_644_p1));
    add_ln118_fu_606_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln506_fu_414_p1));
    add_ln506_1_fu_482_p2 <= std_logic_vector(signed(ap_const_lv12_FFE) + signed(zext_ln443_fu_352_p1));
    add_ln506_2_fu_508_p2 <= std_logic_vector(signed(ap_const_lv12_FFD) + signed(zext_ln443_fu_352_p1));
    add_ln506_fu_418_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(zext_ln443_fu_352_p1));
    add_ln507_fu_548_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln506_fu_414_p1));
    add_ln703_5_fu_1086_p2 <= std_logic_vector(unsigned(mul_ln1118_5_fu_1077_p2) + unsigned(sext_ln703_3_fu_1069_p1));
    add_ln703_6_fu_1096_p2 <= std_logic_vector(signed(sext_ln703_4_fu_1092_p1) + signed(grp_fu_1269_p3));
    add_ln703_8_fu_1121_p2 <= std_logic_vector(signed(grp_fu_1269_p3) + signed(zext_ln703_fu_1082_p1));
    add_ln703_9_fu_1126_p2 <= std_logic_vector(signed(mul_ln1118_4_fu_1064_p2) + signed(zext_ln703_1_fu_1101_p1));
    and_ln118_1_fu_444_p2 <= (xor_ln118_6_fu_432_p2 and icmp_ln118_fu_438_p2);
    and_ln118_fu_706_p2 <= (xor_ln118_8_fu_694_p2 and icmp_ln118_1_fu_700_p2);
    and_ln144_fu_778_p2 <= (or_ln118_fu_772_p2 and icmp_ln144_fu_742_p2);
    and_ln512_fu_812_p2 <= (icmp_ln899_reg_1401 and icmp_ln891_fu_670_p2);
    and_ln786_fu_1180_p2 <= (tmp_41_fu_1154_p3 and p_Result_1_fu_1146_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, and_ln512_reg_1479_pp0_iter1_reg, ap_predicate_op158_read_state4, ap_predicate_op169_read_state4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_lv1_1 = and_ln512_reg_1479_pp0_iter1_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op169_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op158_read_state4 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, and_ln512_reg_1479_pp0_iter1_reg, ap_predicate_op158_read_state4, ap_predicate_op169_read_state4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = and_ln512_reg_1479_pp0_iter1_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op169_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op158_read_state4 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, and_ln512_reg_1479_pp0_iter1_reg, ap_predicate_op158_read_state4, ap_predicate_op169_read_state4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = and_ln512_reg_1479_pp0_iter1_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op169_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op158_read_state4 = ap_const_boolean_1)))));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_V_empty_n, ap_predicate_op158_read_state4, ap_predicate_op169_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op169_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op158_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(p_dst_data_stream_V_full_n, and_ln512_reg_1479_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((ap_const_lv1_1 = and_ln512_reg_1479_pp0_iter1_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_947_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln444_reg_1436, and_ln118_reg_1445)
    begin
                ap_condition_947 <= ((ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln443_fu_356_p2, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln443_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_122_assign_proc : process(icmp_ln444_fu_648_p2)
    begin
                ap_enable_operation_122 <= (icmp_ln444_fu_648_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_124_assign_proc : process(icmp_ln444_fu_648_p2)
    begin
                ap_enable_operation_124 <= (icmp_ln444_fu_648_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_126_assign_proc : process(icmp_ln444_fu_648_p2)
    begin
                ap_enable_operation_126 <= (icmp_ln444_fu_648_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_148_assign_proc : process(icmp_ln444_reg_1436)
    begin
                ap_enable_operation_148 <= (icmp_ln444_reg_1436 = ap_const_lv1_0);
    end process;


    ap_enable_operation_152_assign_proc : process(icmp_ln444_reg_1436)
    begin
                ap_enable_operation_152 <= (icmp_ln444_reg_1436 = ap_const_lv1_0);
    end process;


    ap_enable_operation_155_assign_proc : process(icmp_ln444_reg_1436)
    begin
                ap_enable_operation_155 <= (icmp_ln444_reg_1436 = ap_const_lv1_0);
    end process;


    ap_enable_operation_159_assign_proc : process(ap_predicate_op159_store_state4)
    begin
                ap_enable_operation_159 <= (ap_predicate_op159_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_161_assign_proc : process(ap_predicate_op161_store_state4)
    begin
                ap_enable_operation_161 <= (ap_predicate_op161_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_163_assign_proc : process(ap_predicate_op163_store_state4)
    begin
                ap_enable_operation_163 <= (ap_predicate_op163_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_167_assign_proc : process(ap_predicate_op167_store_state4)
    begin
                ap_enable_operation_167 <= (ap_predicate_op167_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_168_assign_proc : process(ap_predicate_op168_store_state4)
    begin
                ap_enable_operation_168 <= (ap_predicate_op168_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_170_assign_proc : process(ap_predicate_op170_store_state4)
    begin
                ap_enable_operation_170 <= (ap_predicate_op170_store_state4 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state3_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state3_pp0_iter0_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_enable_state4_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state4_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op158_read_state4_assign_proc : process(icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401)
    begin
                ap_predicate_op158_read_state4 <= ((ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0));
    end process;


    ap_predicate_op159_store_state4_assign_proc : process(icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln879_reg_1406)
    begin
                ap_predicate_op159_store_state4 <= ((icmp_ln879_reg_1406 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0));
    end process;


    ap_predicate_op161_store_state4_assign_proc : process(icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln879_1_reg_1410)
    begin
                ap_predicate_op161_store_state4 <= ((icmp_ln879_1_reg_1410 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0));
    end process;


    ap_predicate_op163_store_state4_assign_proc : process(icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln879_reg_1406)
    begin
                ap_predicate_op163_store_state4 <= ((icmp_ln879_reg_1406 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0));
    end process;


    ap_predicate_op167_store_state4_assign_proc : process(icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392)
    begin
                ap_predicate_op167_store_state4 <= ((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0));
    end process;


    ap_predicate_op168_store_state4_assign_proc : process(icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392)
    begin
                ap_predicate_op168_store_state4 <= ((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0));
    end process;


    ap_predicate_op169_read_state4_assign_proc : process(icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392)
    begin
                ap_predicate_op169_read_state4 <= ((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0));
    end process;


    ap_predicate_op170_store_state4_assign_proc : process(icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392)
    begin
                ap_predicate_op170_store_state4 <= ((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(icmp_ln443_fu_356_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln443_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_buf_0_val_0_0_fu_852_p3 <= 
        k_buf_0_val_3_q0 when (or_ln457_reg_1454(0) = '1') else 
        tmp_4_fu_840_p5;
    col_buf_0_val_1_0_fu_871_p3 <= 
        k_buf_0_val_4_q0 when (or_ln457_reg_1454(0) = '1') else 
        tmp_5_fu_859_p5;
    col_buf_0_val_2_0_fu_890_p3 <= 
        k_buf_0_val_5_q0 when (or_ln457_reg_1454(0) = '1') else 
        tmp_6_fu_878_p5;
    grp_fu_1247_p0 <= grp_fu_1247_p00(8 - 1 downto 0);
    grp_fu_1247_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_21_fu_160),10));
    grp_fu_1247_p1 <= sext_ln1118_reg_1353(2 - 1 downto 0);
    grp_fu_1254_p0 <= grp_fu_1254_p00(8 - 1 downto 0);
    grp_fu_1254_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_25_fu_980_p3),10));
    grp_fu_1254_p1 <= sext_ln1118_1_reg_1358(2 - 1 downto 0);
    grp_fu_1262_p0 <= grp_fu_1262_p00(8 - 1 downto 0);
    grp_fu_1262_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_20_fu_156),11));
    grp_fu_1262_p1 <= sext_ln1118_2_reg_1363(3 - 1 downto 0);
    grp_fu_1269_p0 <= grp_fu_1269_p00(8 - 1 downto 0);
    grp_fu_1269_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_24_reg_1490),12));
    grp_fu_1269_p1 <= zext_ln1118_4_reg_1368(4 - 1 downto 0);
    i_V_fu_362_p2 <= std_logic_vector(unsigned(t_V_reg_306) + unsigned(ap_const_lv11_1));
    icmp_ln118_1_fu_700_p2 <= "1" when (signed(ImagLoc_x_fu_676_p2) < signed(ap_const_lv12_780)) else "0";
    icmp_ln118_fu_438_p2 <= "1" when (signed(add_ln506_fu_418_p2) < signed(ap_const_lv12_438)) else "0";
    icmp_ln144_1_fu_472_p2 <= "1" when (signed(select_ln139_1_fu_464_p3) < signed(ap_const_lv12_438)) else "0";
    icmp_ln144_fu_742_p2 <= "1" when (signed(select_ln139_fu_726_p3) < signed(ap_const_lv12_780)) else "0";
    icmp_ln443_fu_356_p2 <= "1" when (t_V_reg_306 = ap_const_lv11_43A) else "0";
    icmp_ln444_fu_648_p2 <= "1" when (t_V_2_reg_317 = ap_const_lv11_782) else "0";
    icmp_ln879_1_fu_402_p2 <= "1" when (t_V_reg_306 = ap_const_lv11_0) else "0";
    icmp_ln879_fu_396_p2 <= "1" when (t_V_reg_306 = ap_const_lv11_1) else "0";
    icmp_ln887_fu_368_p2 <= "1" when (unsigned(t_V_reg_306) < unsigned(ap_const_lv11_438)) else "0";
    icmp_ln891_fu_670_p2 <= "0" when (tmp_34_fu_660_p4 = ap_const_lv10_0) else "1";
    icmp_ln899_1_fu_408_p2 <= "1" when (unsigned(t_V_reg_306) > unsigned(ap_const_lv11_438)) else "0";
    icmp_ln899_fu_390_p2 <= "0" when (tmp_fu_380_p4 = ap_const_lv10_0) else "1";
    j_V_fu_654_p2 <= std_logic_vector(unsigned(t_V_2_reg_317) + unsigned(ap_const_lv11_1));
    k_buf_0_val_3_address0 <= zext_ln835_fu_805_p1(11 - 1 downto 0);
    k_buf_0_val_3_address1 <= k_buf_0_val_3_addr_reg_1461;

    k_buf_0_val_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_0_val_3_ce0 <= ap_const_logic_1;
        else 
            k_buf_0_val_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392, icmp_ln879_reg_1406, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_reg_1406 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_3_ce1 <= ap_const_logic_1;
        else 
            k_buf_0_val_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_3_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392, icmp_ln879_reg_1406, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_reg_1406 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_3_we1 <= ap_const_logic_1;
        else 
            k_buf_0_val_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    k_buf_0_val_4_address0 <= zext_ln835_fu_805_p1(11 - 1 downto 0);
    k_buf_0_val_4_address1 <= k_buf_0_val_4_addr_reg_1467;

    k_buf_0_val_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_0_val_4_ce0 <= ap_const_logic_1;
        else 
            k_buf_0_val_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392, icmp_ln879_1_reg_1410, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_1_reg_1410 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_4_ce1 <= ap_const_logic_1;
        else 
            k_buf_0_val_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_4_d1_assign_proc : process(p_src_data_stream_V_dout, icmp_ln899_reg_1401, icmp_ln887_reg_1392, icmp_ln879_1_reg_1410, k_buf_0_val_3_q0, ap_condition_947)
    begin
        if ((ap_const_boolean_1 = ap_condition_947)) then
            if (((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1))) then 
                k_buf_0_val_4_d1 <= k_buf_0_val_3_q0;
            elsif (((icmp_ln879_1_reg_1410 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_0))) then 
                k_buf_0_val_4_d1 <= p_src_data_stream_V_dout;
            else 
                k_buf_0_val_4_d1 <= "XXXXXXXX";
            end if;
        else 
            k_buf_0_val_4_d1 <= "XXXXXXXX";
        end if; 
    end process;


    k_buf_0_val_4_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392, icmp_ln879_1_reg_1410, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_1_reg_1410 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_4_we1 <= ap_const_logic_1;
        else 
            k_buf_0_val_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    k_buf_0_val_5_address0 <= zext_ln835_fu_805_p1(11 - 1 downto 0);
    k_buf_0_val_5_address1 <= k_buf_0_val_5_addr_reg_1473;

    k_buf_0_val_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_0_val_5_ce0 <= ap_const_logic_1;
        else 
            k_buf_0_val_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392, icmp_ln879_reg_1406, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_reg_1406 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_5_ce1 <= ap_const_logic_1;
        else 
            k_buf_0_val_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_5_d1_assign_proc : process(p_src_data_stream_V_dout, icmp_ln899_reg_1401, icmp_ln887_reg_1392, icmp_ln879_reg_1406, k_buf_0_val_4_q0, ap_condition_947)
    begin
        if ((ap_const_boolean_1 = ap_condition_947)) then
            if (((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1))) then 
                k_buf_0_val_5_d1 <= k_buf_0_val_4_q0;
            elsif (((icmp_ln879_reg_1406 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_0))) then 
                k_buf_0_val_5_d1 <= p_src_data_stream_V_dout;
            else 
                k_buf_0_val_5_d1 <= "XXXXXXXX";
            end if;
        else 
            k_buf_0_val_5_d1 <= "XXXXXXXX";
        end if; 
    end process;


    k_buf_0_val_5_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392, icmp_ln879_reg_1406, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_reg_1406 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_5_we1 <= ap_const_logic_1;
        else 
            k_buf_0_val_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_4_fu_1064_p0 <= mul_ln1118_4_fu_1064_p00(8 - 1 downto 0);
    mul_ln1118_4_fu_1064_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_18_fu_148),10));
    mul_ln1118_4_fu_1064_p1 <= sext_ln1118_3_reg_1373(2 - 1 downto 0);
    mul_ln1118_4_fu_1064_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1118_4_fu_1064_p0) * signed(mul_ln1118_4_fu_1064_p1))), 10));
    mul_ln1118_5_fu_1077_p0 <= mul_ln1118_5_fu_1077_p00(8 - 1 downto 0);
    mul_ln1118_5_fu_1077_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_fu_144),11));
    mul_ln1118_5_fu_1077_p1 <= zext_ln1118_5_reg_1378(3 - 1 downto 0);
    mul_ln1118_5_fu_1077_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1118_5_fu_1077_p0) * unsigned(mul_ln1118_5_fu_1077_p1), 11));
    or_ln118_fu_772_p2 <= (xor_ln118_9_fu_766_p2 or tmp_35_fu_686_p3);
    or_ln340_1_fu_1204_p2 <= (xor_ln785_fu_1168_p2 or and_ln786_fu_1180_p2);
    or_ln340_fu_1198_p2 <= (underflow_fu_1192_p2 or overflow_fu_1174_p2);
    or_ln457_fu_800_p2 <= (xor_ln457_reg_1396 or icmp_ln118_1_fu_700_p2);
    or_ln785_fu_1162_p2 <= (tmp_41_fu_1154_p3 or p_Result_1_fu_1146_p3);
    overflow_fu_1174_p2 <= (xor_ln785_fu_1168_p2 and or_ln785_fu_1162_p2);
    p_Result_1_fu_1146_p3 <= p_Val2_5_fu_1136_p2(11 downto 11);
    p_Result_s_fu_1113_p3 <= p_Val2_s_fu_1107_p2(11 downto 11);
    p_Val2_5_fu_1136_p2 <= std_logic_vector(signed(sext_ln703_5_fu_1132_p1) + signed(add_ln703_8_fu_1121_p2));
    p_Val2_s_fu_1107_p2 <= std_logic_vector(unsigned(add_ln703_6_fu_1096_p2) + unsigned(zext_ln703_2_fu_1104_p1));

    p_dst_data_stream_V_blk_n_assign_proc : process(p_dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln512_reg_1479_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln512_reg_1479_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dst_data_stream_V_blk_n <= p_dst_data_stream_V_full_n;
        else 
            p_dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_V_din <= 
        select_ln340_fu_1210_p3 when (or_ln340_1_fu_1204_p2(0) = '1') else 
        select_ln388_fu_1218_p3;

    p_dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln512_reg_1479_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln512_reg_1479_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_stream_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_V_blk_n_assign_proc : process(p_src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln444_reg_1436, and_ln118_reg_1445, icmp_ln899_reg_1401, icmp_ln887_reg_1392)
    begin
        if ((((icmp_ln887_reg_1392 = ap_const_lv1_1) and (icmp_ln899_reg_1401 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_lv1_1 = and_ln118_reg_1445) and (icmp_ln899_reg_1401 = ap_const_lv1_0) and (icmp_ln444_reg_1436 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_src_data_stream_V_blk_n <= p_src_data_stream_V_empty_n;
        else 
            p_src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op158_read_state4, ap_predicate_op169_read_state4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op169_read_state4 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op158_read_state4 = ap_const_boolean_1)))) then 
            p_src_data_stream_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln118_1_fu_630_p3 <= 
        select_ln139_5_fu_622_p3 when (tmp_32_fu_514_p3(0) = '1') else 
        add_ln118_fu_606_p2;
    select_ln118_3_fu_754_p3 <= 
        sext_ln451_fu_682_p1 when (and_ln118_fu_706_p2(0) = '1') else 
        sub_ln147_fu_748_p2;
    select_ln118_fu_592_p3 <= 
        select_ln139_4_fu_584_p3 when (tmp_30_fu_488_p3(0) = '1') else 
        xor_ln118_1_fu_568_p2;
    select_ln139_1_fu_464_p3 <= 
        sub_ln142_fu_458_p2 when (tmp_29_fu_450_p3(0) = '1') else 
        add_ln506_fu_418_p2;
    select_ln139_4_fu_584_p3 <= 
        sub_ln118_fu_574_p2 when (tmp_31_fu_496_p3(0) = '1') else 
        trunc_ln118_fu_580_p1;
    select_ln139_5_fu_622_p3 <= 
        xor_ln118_7_fu_612_p2 when (tmp_33_fu_522_p3(0) = '1') else 
        trunc_ln118_2_fu_618_p1;
    select_ln139_fu_726_p3 <= 
        sub_ln142_2_fu_720_p2 when (tmp_36_fu_712_p3(0) = '1') else 
        ImagLoc_x_fu_676_p2;
    select_ln340_fu_1210_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_fu_1198_p2(0) = '1') else 
        sext_ln703_6_fu_1142_p1;
    select_ln388_fu_1218_p3 <= 
        ap_const_lv16_8000 when (underflow_fu_1192_p2(0) = '1') else 
        sext_ln703_6_fu_1142_p1;
    select_ln507_1_fu_554_p3 <= 
        add_ln507_fu_548_p2 when (and_ln118_1_fu_444_p2(0) = '1') else 
        select_ln507_fu_540_p3;
    select_ln507_fu_540_p3 <= 
        trunc_ln147_fu_478_p1 when (icmp_ln144_1_fu_472_p2(0) = '1') else 
        sub_ln507_fu_534_p2;
        sext_ln1118_1_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_kernel_val_0_V_2_read),10));

        sext_ln1118_2_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_kernel_val_1_V_0_read),11));

        sext_ln1118_3_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_kernel_val_2_V_0_read),10));

        sext_ln1118_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_kernel_val_0_V_1_read),10));

        sext_ln139_1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln139_fu_726_p3),13));

        sext_ln139_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln139_fu_726_p3),14));

        sext_ln144_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_fu_784_p3),32));

        sext_ln451_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ImagLoc_x_fu_676_p2),13));

        sext_ln703_3_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_4_fu_1064_p2),11));

        sext_ln703_4_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_5_fu_1086_p2),12));

        sext_ln703_5_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_9_fu_1126_p2),12));

        sext_ln703_6_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_fu_1136_p2),16));

    src_kernel_win_0_va_23_fu_944_p3 <= 
        tmp_7_fu_933_p5 when (icmp_ln899_1_reg_1414(0) = '1') else 
        col_buf_0_val_0_0_fu_852_p3;
    src_kernel_win_0_va_24_fu_962_p3 <= 
        tmp_8_fu_951_p5 when (icmp_ln899_1_reg_1414(0) = '1') else 
        col_buf_0_val_1_0_fu_871_p3;
    src_kernel_win_0_va_25_fu_980_p3 <= 
        tmp_9_fu_969_p5 when (icmp_ln899_1_reg_1414(0) = '1') else 
        col_buf_0_val_2_0_fu_890_p3;
    sub_ln1118_fu_1000_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(zext_ln1118_fu_996_p1));
    sub_ln118_fu_574_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(trunc_ln142_fu_504_p1));
    sub_ln142_2_fu_720_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) - unsigned(zext_ln444_fu_644_p1));
    sub_ln142_fu_458_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) - unsigned(zext_ln443_fu_352_p1));
    sub_ln147_fu_748_p2 <= std_logic_vector(unsigned(ap_const_lv13_EFE) - unsigned(sext_ln139_1_fu_738_p1));
    sub_ln507_fu_534_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(trunc_ln147_fu_478_p1));
    tmp_28_fu_424_p3 <= add_ln506_fu_418_p2(11 downto 11);
    tmp_29_fu_450_p3 <= add_ln506_fu_418_p2(11 downto 11);
    tmp_30_fu_488_p3 <= add_ln506_1_fu_482_p2(11 downto 11);
    tmp_31_fu_496_p3 <= add_ln506_1_fu_482_p2(11 downto 11);
    tmp_32_fu_514_p3 <= add_ln506_2_fu_508_p2(11 downto 11);
    tmp_33_fu_522_p3 <= add_ln506_2_fu_508_p2(11 downto 11);
    tmp_34_fu_660_p4 <= t_V_2_reg_317(10 downto 1);
    tmp_35_fu_686_p3 <= ImagLoc_x_fu_676_p2(11 downto 11);
    tmp_36_fu_712_p3 <= ImagLoc_x_fu_676_p2(11 downto 11);
    tmp_41_fu_1154_p3 <= p_Val2_s_fu_1107_p2(11 downto 11);
    tmp_fu_380_p4 <= t_V_reg_306(10 downto 1);
    trunc_ln118_2_fu_618_p1 <= add_ln506_2_fu_508_p2(2 - 1 downto 0);
    trunc_ln118_fu_580_p1 <= add_ln506_1_fu_482_p2(2 - 1 downto 0);
    trunc_ln142_2_fu_530_p1 <= t_V_reg_306(2 - 1 downto 0);
    trunc_ln142_fu_504_p1 <= t_V_reg_306(2 - 1 downto 0);
    trunc_ln147_fu_478_p1 <= select_ln139_1_fu_464_p3(2 - 1 downto 0);
    trunc_ln458_fu_796_p1 <= x_fu_784_p3(2 - 1 downto 0);
    trunc_ln506_fu_414_p1 <= t_V_reg_306(2 - 1 downto 0);
    underflow_fu_1192_p2 <= (xor_ln786_fu_1186_p2 and p_Result_s_fu_1113_p3);
    x_fu_784_p3 <= 
        sext_ln139_fu_734_p1 when (and_ln144_fu_778_p2(0) = '1') else 
        zext_ln118_fu_762_p1;
    xor_ln118_1_fu_568_p2 <= (trunc_ln506_fu_414_p1 xor ap_const_lv2_2);
    xor_ln118_6_fu_432_p2 <= (tmp_28_fu_424_p3 xor ap_const_lv1_1);
    xor_ln118_7_fu_612_p2 <= (trunc_ln142_2_fu_530_p1 xor ap_const_lv2_3);
    xor_ln118_8_fu_694_p2 <= (tmp_35_fu_686_p3 xor ap_const_lv1_1);
    xor_ln118_9_fu_766_p2 <= (icmp_ln118_1_fu_700_p2 xor ap_const_lv1_1);
    xor_ln457_fu_374_p2 <= (icmp_ln887_fu_368_p2 xor ap_const_lv1_1);
    xor_ln493_1_fu_562_p2 <= (select_ln507_1_fu_554_p3 xor ap_const_lv2_3);
    xor_ln493_2_fu_600_p2 <= (select_ln118_fu_592_p3 xor ap_const_lv2_3);
    xor_ln493_3_fu_638_p2 <= (select_ln118_1_fu_630_p3 xor ap_const_lv2_3);
    xor_ln493_fu_835_p2 <= (trunc_ln458_reg_1449 xor ap_const_lv2_3);
    xor_ln785_fu_1168_p2 <= (p_Result_s_fu_1113_p3 xor ap_const_lv1_1);
    xor_ln786_fu_1186_p2 <= (ap_const_lv1_1 xor and_ln786_fu_1180_p2);
    zext_ln1118_4_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_val_1_V_2_read),12));
    zext_ln1118_5_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_kernel_val_2_V_1_read),11));
    zext_ln1118_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_22_fu_164),9));
    zext_ln118_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln118_3_fu_754_p3),14));
    zext_ln443_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_306),12));
    zext_ln444_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_317),12));
    zext_ln703_1_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_23_reg_1483),10));
    zext_ln703_2_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_23_reg_1483),12));
    zext_ln703_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1118_5_fu_1077_p2),12));
    zext_ln835_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln144_fu_792_p1),64));
end behav;
