// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddWeighted (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src1_data_stream_V_dout,
        src1_data_stream_V_empty_n,
        src1_data_stream_V_read,
        src2_data_stream_V_dout,
        src2_data_stream_V_empty_n,
        src2_data_stream_V_read,
        dst_rows_V_dout,
        dst_rows_V_empty_n,
        dst_rows_V_read,
        dst_cols_V_dout,
        dst_cols_V_empty_n,
        dst_cols_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write,
        dst_rows_V_out_din,
        dst_rows_V_out_full_n,
        dst_rows_V_out_write,
        dst_cols_V_out_din,
        dst_cols_V_out_full_n,
        dst_cols_V_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state26 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] src1_data_stream_V_dout;
input   src1_data_stream_V_empty_n;
output   src1_data_stream_V_read;
input  [7:0] src2_data_stream_V_dout;
input   src2_data_stream_V_empty_n;
output   src2_data_stream_V_read;
input  [11:0] dst_rows_V_dout;
input   dst_rows_V_empty_n;
output   dst_rows_V_read;
input  [11:0] dst_cols_V_dout;
input   dst_cols_V_empty_n;
output   dst_cols_V_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;
output  [11:0] dst_rows_V_out_din;
input   dst_rows_V_out_full_n;
output   dst_rows_V_out_write;
output  [11:0] dst_cols_V_out_din;
input   dst_cols_V_out_full_n;
output   dst_cols_V_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg src1_data_stream_V_read;
reg src2_data_stream_V_read;
reg dst_rows_V_read;
reg dst_cols_V_read;
reg dst_data_stream_V_write;
reg dst_rows_V_out_write;
reg dst_cols_V_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    src1_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln355_reg_1093;
reg    src2_data_stream_V_blk_n;
reg    dst_rows_V_blk_n;
reg    dst_cols_V_blk_n;
reg    dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter22;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter21_reg;
reg    dst_rows_V_out_blk_n;
reg    dst_cols_V_out_blk_n;
reg   [31:0] t_V_4_reg_262;
wire  signed [31:0] rows_V_fu_298_p1;
reg  signed [31:0] rows_V_reg_1074;
reg    ap_block_state1;
wire  signed [31:0] cols_V_fu_302_p1;
reg  signed [31:0] cols_V_reg_1079;
wire   [0:0] icmp_ln354_fu_306_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_311_p2;
reg   [31:0] i_V_reg_1088;
wire   [0:0] icmp_ln355_fu_317_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
wire    ap_block_state22_pp0_stage0_iter19;
wire    ap_block_state23_pp0_stage0_iter20;
wire    ap_block_state24_pp0_stage0_iter21;
reg    ap_block_state25_pp0_stage0_iter22;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter1_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter2_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter3_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter4_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter5_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter6_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter7_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter8_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter9_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter10_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter11_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter12_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter13_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter14_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter15_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter16_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter17_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter18_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter19_reg;
reg   [0:0] icmp_ln355_reg_1093_pp0_iter20_reg;
wire   [31:0] j_V_fu_322_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_reg_1102;
reg   [7:0] tmp_62_reg_1107;
wire   [63:0] grp_fu_292_p1;
reg   [63:0] tmp_i_i_reg_1122;
wire   [63:0] grp_fu_295_p1;
reg   [63:0] tmp_8_i_i_reg_1127;
wire   [63:0] grp_fu_282_p2;
reg   [63:0] t1_reg_1132;
wire   [63:0] grp_fu_287_p2;
reg   [63:0] t2_reg_1137;
wire   [63:0] grp_fu_273_p2;
reg   [63:0] tmp_9_i_i_reg_1142;
wire   [63:0] grp_fu_277_p2;
reg   [63:0] sum_reg_1147;
wire   [0:0] icmp_ln833_fu_353_p2;
reg   [0:0] icmp_ln833_reg_1152;
wire   [0:0] icmp_ln837_fu_359_p2;
reg   [0:0] icmp_ln837_reg_1158;
wire   [0:0] icmp_ln571_fu_407_p2;
reg   [0:0] icmp_ln571_reg_1164;
wire   [7:0] p_Val2_25_fu_659_p3;
reg   [7:0] p_Val2_25_reg_1170;
wire   [0:0] underflow_fu_963_p3;
reg   [0:0] underflow_reg_1176;
wire   [0:0] or_ln658_1_fu_977_p2;
reg   [0:0] or_ln658_1_reg_1182;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg   [31:0] t_V_reg_251;
wire    ap_CS_fsm_state26;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_292_p0;
wire   [31:0] grp_fu_295_p0;
wire  signed [11:0] rows_V_fu_298_p0;
wire  signed [11:0] cols_V_fu_302_p0;
wire   [63:0] p_Val2_22_fu_336_p1;
wire   [10:0] tmp_V_fu_339_p4;
wire   [51:0] tmp_V_5_fu_349_p1;
wire   [52:0] tmp_1_i_fu_381_p3;
wire   [53:0] p_Result_21_fu_389_p1;
wire   [0:0] p_Result_20_fu_369_p3;
wire   [53:0] man_V_1_fu_393_p2;
wire   [62:0] trunc_ln556_fu_365_p1;
wire   [11:0] zext_ln461_fu_377_p1;
wire   [11:0] F2_fu_413_p2;
wire   [0:0] icmp_ln581_fu_419_p2;
wire   [11:0] sub_ln581_fu_425_p2;
wire  signed [11:0] F2_6_fu_431_p3;
wire   [53:0] p_Val2_s_fu_399_p3;
wire   [8:0] tmp_64_fu_463_p4;
wire  signed [31:0] sext_ln581_fu_443_p1;
wire   [53:0] zext_ln586_fu_479_p1;
wire   [53:0] ashr_ln586_fu_483_p2;
wire   [0:0] tmp_65_fu_493_p3;
wire   [7:0] trunc_ln583_fu_453_p1;
wire   [7:0] trunc_ln581_fu_439_p1;
wire   [0:0] icmp_ln585_fu_457_p2;
wire   [7:0] trunc_ln586_fu_489_p1;
wire   [7:0] select_ln588_fu_501_p3;
wire   [11:0] add_ln591_fu_529_p2;
wire   [31:0] zext_ln591_fu_535_p1;
wire   [0:0] icmp_ln591_fu_523_p2;
wire   [0:0] p_Result_s_fu_539_p3;
wire   [7:0] p_Val2_23_fu_515_p3;
wire   [0:0] qb_fu_547_p3;
wire   [7:0] zext_ln415_fu_563_p1;
wire   [7:0] p_Val2_24_fu_567_p2;
wire   [0:0] tmp_67_fu_573_p3;
wire   [0:0] icmp_ln582_fu_447_p2;
wire   [0:0] xor_ln582_fu_595_p2;
wire   [0:0] and_ln581_fu_601_p2;
wire   [0:0] p_Result_22_fu_555_p3;
wire   [0:0] and_ln403_fu_607_p2;
wire   [7:0] select_ln582_fu_587_p3;
wire   [0:0] xor_ln403_fu_621_p2;
wire   [0:0] and_ln403_3_fu_627_p2;
wire   [7:0] select_ln403_fu_613_p3;
wire   [0:0] or_ln581_fu_641_p2;
wire   [0:0] icmp_ln603_fu_473_p2;
wire   [0:0] xor_ln581_fu_647_p2;
wire   [0:0] and_ln603_fu_653_p2;
wire   [7:0] shl_ln604_fu_509_p2;
wire   [7:0] select_ln403_3_fu_633_p3;
wire   [0:0] xor_ln603_fu_667_p2;
wire   [0:0] or_ln603_fu_673_p2;
wire   [0:0] xor_ln416_fu_581_p2;
wire   [0:0] and_ln603_5_fu_679_p2;
wire  signed [11:0] pos1_fu_691_p2;
wire  signed [11:0] pos2_fu_701_p2;
wire   [0:0] tmp_69_fu_725_p3;
wire  signed [31:0] sext_ln618_fu_697_p1;
wire   [53:0] zext_ln623_fu_739_p1;
wire   [53:0] ashr_ln623_fu_743_p2;
wire   [0:0] lD_fu_749_p1;
wire   [0:0] xor_ln621_3_fu_733_p2;
wire   [0:0] and_ln621_fu_753_p2;
wire   [0:0] icmp_ln621_fu_719_p2;
wire   [0:0] tmp_70_fu_765_p3;
wire   [0:0] icmp_ln631_fu_779_p2;
wire   [0:0] xor_ln631_fu_773_p2;
wire  signed [31:0] sext_ln619_fu_707_p1;
wire   [53:0] zext_ln635_fu_791_p1;
wire   [53:0] Range2_V_3_fu_795_p2;
wire   [53:0] r_V_fu_801_p2;
wire   [0:0] and_ln631_fu_785_p2;
wire   [0:0] Range2_all_ones_fu_807_p2;
wire   [0:0] select_ln631_fu_813_p3;
wire   [0:0] Range1_all_ones_3_fu_759_p2;
wire   [0:0] icmp_ln641_fu_833_p2;
wire   [0:0] Range1_all_zeros_fu_839_p2;
wire   [0:0] Range1_all_zeros_3_fu_857_p2;
wire   [0:0] xor_ln639_3_fu_869_p2;
wire   [0:0] icmp_ln642_fu_851_p2;
wire   [0:0] or_ln639_fu_875_p2;
wire   [0:0] and_ln642_fu_881_p2;
wire   [0:0] and_ln639_fu_821_p2;
wire   [0:0] Range1_all_ones_fu_827_p2;
wire   [0:0] select_ln642_fu_887_p3;
wire   [0:0] or_ln645_fu_863_p2;
wire   [0:0] and_ln641_fu_845_p2;
wire   [0:0] select_ln642_3_fu_903_p3;
wire   [0:0] and_ln603_6_fu_685_p2;
wire   [0:0] select_ln639_fu_895_p3;
wire   [0:0] select_ln639_3_fu_911_p3;
wire   [0:0] and_ln654_fu_927_p2;
wire   [0:0] p_Result_23_fu_711_p3;
wire   [0:0] xor_ln621_fu_939_p2;
wire   [0:0] and_ln621_4_fu_945_p2;
wire   [0:0] and_ln557_fu_957_p2;
wire   [0:0] empty_111_fu_933_p2;
wire   [0:0] and_ln621_5_fu_951_p2;
wire   [0:0] or_ln658_fu_971_p2;
wire   [0:0] deleted_zeros_fu_919_p3;
wire   [0:0] xor_ln340_fu_987_p2;
wire   [0:0] xor_ln340_1_fu_997_p2;
wire   [0:0] and_ln340_fu_992_p2;
wire   [0:0] and_ln428_3_fu_1015_p2;
wire   [0:0] xor_ln428_fu_1019_p2;
wire   [0:0] and_ln571_fu_1025_p2;
wire   [0:0] and_ln428_fu_983_p2;
wire   [0:0] or_ln571_fu_1030_p2;
wire   [0:0] or_ln571_4_fu_1036_p2;
wire   [0:0] or_ln571_3_fu_1048_p2;
wire   [0:0] or_ln340_fu_1002_p2;
wire   [0:0] xor_ln571_fu_1053_p2;
wire   [0:0] and_ln340_1_fu_1059_p2;
wire   [7:0] select_ln340_fu_1008_p3;
wire   [7:0] select_ln571_fu_1041_p3;
reg    grp_fu_273_ce;
reg    grp_fu_277_ce;
reg    grp_fu_282_ce;
reg    grp_fu_287_ce;
reg    grp_fu_292_ce;
reg    grp_fu_295_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
end

sobel_accel_dadd_udo #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sobel_accel_dadd_udo_U87(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t1_reg_1132),
    .din1(t2_reg_1137),
    .ce(grp_fu_273_ce),
    .dout(grp_fu_273_p2)
);

sobel_accel_dadd_udo #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sobel_accel_dadd_udo_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_i_i_reg_1142),
    .din1(64'd0),
    .ce(grp_fu_277_ce),
    .dout(grp_fu_277_p2)
);

sobel_accel_dmul_vdy #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sobel_accel_dmul_vdy_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_i_reg_1122),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_282_ce),
    .dout(grp_fu_282_p2)
);

sobel_accel_dmul_vdy #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sobel_accel_dmul_vdy_U90(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_8_i_i_reg_1127),
    .din1(64'd4602678819172646912),
    .ce(grp_fu_287_ce),
    .dout(grp_fu_287_p2)
);

sobel_accel_uitodwdI #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sobel_accel_uitodwdI_U91(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_292_p0),
    .ce(grp_fu_292_ce),
    .dout(grp_fu_292_p1)
);

sobel_accel_uitodwdI #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sobel_accel_uitodwdI_U92(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_295_p0),
    .ce(grp_fu_295_ce),
    .dout(grp_fu_295_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln354_fu_306_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln354_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end else if (((icmp_ln354_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter22 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln355_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_4_reg_262 <= j_V_fu_322_p2;
    end else if (((icmp_ln354_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_4_reg_262 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        t_V_reg_251 <= i_V_reg_1088;
    end else if ((~((dst_cols_V_out_full_n == 1'b0) | (dst_rows_V_out_full_n == 1'b0) | (dst_cols_V_empty_n == 1'b0) | (dst_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_251 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((dst_cols_V_out_full_n == 1'b0) | (dst_rows_V_out_full_n == 1'b0) | (dst_cols_V_empty_n == 1'b0) | (dst_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_V_reg_1079 <= cols_V_fu_302_p1;
        rows_V_reg_1074 <= rows_V_fu_298_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_1088 <= i_V_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln355_reg_1093 <= icmp_ln355_fu_317_p2;
        icmp_ln355_reg_1093_pp0_iter1_reg <= icmp_ln355_reg_1093;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln355_reg_1093_pp0_iter10_reg <= icmp_ln355_reg_1093_pp0_iter9_reg;
        icmp_ln355_reg_1093_pp0_iter11_reg <= icmp_ln355_reg_1093_pp0_iter10_reg;
        icmp_ln355_reg_1093_pp0_iter12_reg <= icmp_ln355_reg_1093_pp0_iter11_reg;
        icmp_ln355_reg_1093_pp0_iter13_reg <= icmp_ln355_reg_1093_pp0_iter12_reg;
        icmp_ln355_reg_1093_pp0_iter14_reg <= icmp_ln355_reg_1093_pp0_iter13_reg;
        icmp_ln355_reg_1093_pp0_iter15_reg <= icmp_ln355_reg_1093_pp0_iter14_reg;
        icmp_ln355_reg_1093_pp0_iter16_reg <= icmp_ln355_reg_1093_pp0_iter15_reg;
        icmp_ln355_reg_1093_pp0_iter17_reg <= icmp_ln355_reg_1093_pp0_iter16_reg;
        icmp_ln355_reg_1093_pp0_iter18_reg <= icmp_ln355_reg_1093_pp0_iter17_reg;
        icmp_ln355_reg_1093_pp0_iter19_reg <= icmp_ln355_reg_1093_pp0_iter18_reg;
        icmp_ln355_reg_1093_pp0_iter20_reg <= icmp_ln355_reg_1093_pp0_iter19_reg;
        icmp_ln355_reg_1093_pp0_iter21_reg <= icmp_ln355_reg_1093_pp0_iter20_reg;
        icmp_ln355_reg_1093_pp0_iter2_reg <= icmp_ln355_reg_1093_pp0_iter1_reg;
        icmp_ln355_reg_1093_pp0_iter3_reg <= icmp_ln355_reg_1093_pp0_iter2_reg;
        icmp_ln355_reg_1093_pp0_iter4_reg <= icmp_ln355_reg_1093_pp0_iter3_reg;
        icmp_ln355_reg_1093_pp0_iter5_reg <= icmp_ln355_reg_1093_pp0_iter4_reg;
        icmp_ln355_reg_1093_pp0_iter6_reg <= icmp_ln355_reg_1093_pp0_iter5_reg;
        icmp_ln355_reg_1093_pp0_iter7_reg <= icmp_ln355_reg_1093_pp0_iter6_reg;
        icmp_ln355_reg_1093_pp0_iter8_reg <= icmp_ln355_reg_1093_pp0_iter7_reg;
        icmp_ln355_reg_1093_pp0_iter9_reg <= icmp_ln355_reg_1093_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln355_reg_1093_pp0_iter20_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln571_reg_1164 <= icmp_ln571_fu_407_p2;
        icmp_ln833_reg_1152 <= icmp_ln833_fu_353_p2;
        icmp_ln837_reg_1158 <= icmp_ln837_fu_359_p2;
        or_ln658_1_reg_1182 <= or_ln658_1_fu_977_p2;
        p_Val2_25_reg_1170 <= p_Val2_25_fu_659_p3;
        underflow_reg_1176 <= underflow_fu_963_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln355_reg_1093_pp0_iter19_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_reg_1147 <= grp_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln355_reg_1093_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t1_reg_1132 <= grp_fu_282_p2;
        t2_reg_1137 <= grp_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln355_reg_1093 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_62_reg_1107 <= src2_data_stream_V_dout;
        tmp_reg_1102 <= src1_data_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln355_reg_1093_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_8_i_i_reg_1127 <= grp_fu_295_p1;
        tmp_i_i_reg_1122 <= grp_fu_292_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln355_reg_1093_pp0_iter14_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_9_i_i_reg_1142 <= grp_fu_273_p2;
    end
end

always @ (*) begin
    if ((icmp_ln355_fu_317_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln354_fu_306_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_cols_V_blk_n = dst_cols_V_empty_n;
    end else begin
        dst_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_cols_V_out_blk_n = dst_cols_V_out_full_n;
    end else begin
        dst_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_cols_V_out_full_n == 1'b0) | (dst_rows_V_out_full_n == 1'b0) | (dst_cols_V_empty_n == 1'b0) | (dst_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_cols_V_out_write = 1'b1;
    end else begin
        dst_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((dst_cols_V_out_full_n == 1'b0) | (dst_rows_V_out_full_n == 1'b0) | (dst_cols_V_empty_n == 1'b0) | (dst_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_cols_V_read = 1'b1;
    end else begin
        dst_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln355_reg_1093_pp0_iter21_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter22 == 1'b1))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln355_reg_1093_pp0_iter21_reg == 1'd0) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_rows_V_blk_n = dst_rows_V_empty_n;
    end else begin
        dst_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_rows_V_out_blk_n = dst_rows_V_out_full_n;
    end else begin
        dst_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_cols_V_out_full_n == 1'b0) | (dst_rows_V_out_full_n == 1'b0) | (dst_cols_V_empty_n == 1'b0) | (dst_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_rows_V_out_write = 1'b1;
    end else begin
        dst_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((dst_cols_V_out_full_n == 1'b0) | (dst_rows_V_out_full_n == 1'b0) | (dst_cols_V_empty_n == 1'b0) | (dst_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_rows_V_read = 1'b1;
    end else begin
        dst_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_273_ce = 1'b1;
    end else begin
        grp_fu_273_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_277_ce = 1'b1;
    end else begin
        grp_fu_277_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_282_ce = 1'b1;
    end else begin
        grp_fu_282_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_287_ce = 1'b1;
    end else begin
        grp_fu_287_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_292_ce = 1'b1;
    end else begin
        grp_fu_292_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_295_ce = 1'b1;
    end else begin
        grp_fu_295_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln354_fu_306_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln355_reg_1093 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src1_data_stream_V_blk_n = src1_data_stream_V_empty_n;
    end else begin
        src1_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln355_reg_1093 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src1_data_stream_V_read = 1'b1;
    end else begin
        src1_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln355_reg_1093 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src2_data_stream_V_blk_n = src2_data_stream_V_empty_n;
    end else begin
        src2_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln355_reg_1093 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src2_data_stream_V_read = 1'b1;
    end else begin
        src2_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((dst_cols_V_out_full_n == 1'b0) | (dst_rows_V_out_full_n == 1'b0) | (dst_cols_V_empty_n == 1'b0) | (dst_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln354_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln355_fu_317_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter21 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter22 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter21 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter22 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln355_fu_317_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_6_fu_431_p3 = ((icmp_ln581_fu_419_p2[0:0] === 1'b1) ? F2_fu_413_p2 : sub_ln581_fu_425_p2);

assign F2_fu_413_p2 = (12'd1075 - zext_ln461_fu_377_p1);

assign Range1_all_ones_3_fu_759_p2 = (icmp_ln621_fu_719_p2 & and_ln621_fu_753_p2);

assign Range1_all_ones_fu_827_p2 = (select_ln631_fu_813_p3 & Range1_all_ones_3_fu_759_p2);

assign Range1_all_zeros_3_fu_857_p2 = ((p_Val2_s_fu_399_p3 == 54'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_839_p2 = (1'd1 ^ Range1_all_ones_3_fu_759_p2);

assign Range2_V_3_fu_795_p2 = p_Val2_s_fu_399_p3 >> zext_ln635_fu_791_p1;

assign Range2_all_ones_fu_807_p2 = ((Range2_V_3_fu_795_p2 == r_V_fu_801_p2) ? 1'b1 : 1'b0);

assign add_ln591_fu_529_p2 = ($signed(12'd4095) + $signed(F2_fu_413_p2));

assign and_ln340_1_fu_1059_p2 = (xor_ln571_fu_1053_p2 & or_ln340_fu_1002_p2);

assign and_ln340_fu_992_p2 = (xor_ln340_fu_987_p2 & or_ln658_1_reg_1182);

assign and_ln403_3_fu_627_p2 = (xor_ln403_fu_621_p2 & and_ln581_fu_601_p2);

assign and_ln403_fu_607_p2 = (p_Result_22_fu_555_p3 & and_ln581_fu_601_p2);

assign and_ln428_3_fu_1015_p2 = (icmp_ln837_reg_1158 & icmp_ln833_reg_1152);

assign and_ln428_fu_983_p2 = (icmp_ln837_reg_1158 & icmp_ln833_reg_1152);

assign and_ln557_fu_957_p2 = (p_Result_20_fu_369_p3 & icmp_ln621_fu_719_p2);

assign and_ln571_fu_1025_p2 = (xor_ln428_fu_1019_p2 & icmp_ln571_reg_1164);

assign and_ln581_fu_601_p2 = (xor_ln582_fu_595_p2 & icmp_ln581_fu_419_p2);

assign and_ln603_5_fu_679_p2 = (xor_ln416_fu_581_p2 & or_ln603_fu_673_p2);

assign and_ln603_6_fu_685_p2 = (and_ln603_5_fu_679_p2 & and_ln403_fu_607_p2);

assign and_ln603_fu_653_p2 = (xor_ln581_fu_647_p2 & icmp_ln603_fu_473_p2);

assign and_ln621_4_fu_945_p2 = (xor_ln621_fu_939_p2 & p_Result_23_fu_711_p3);

assign and_ln621_5_fu_951_p2 = (p_Result_20_fu_369_p3 & and_ln621_4_fu_945_p2);

assign and_ln621_fu_753_p2 = (xor_ln621_3_fu_733_p2 & lD_fu_749_p1);

assign and_ln631_fu_785_p2 = (xor_ln631_fu_773_p2 & icmp_ln631_fu_779_p2);

assign and_ln639_fu_821_p2 = (xor_ln621_3_fu_733_p2 & icmp_ln631_fu_779_p2);

assign and_ln641_fu_845_p2 = (icmp_ln641_fu_833_p2 & Range1_all_zeros_fu_839_p2);

assign and_ln642_fu_881_p2 = (or_ln639_fu_875_p2 & icmp_ln642_fu_851_p2);

assign and_ln654_fu_927_p2 = (select_ln639_fu_895_p3 & and_ln603_6_fu_685_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln355_reg_1093_pp0_iter21_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln355_reg_1093 == 1'd0) & (src2_data_stream_V_empty_n == 1'b0)) | ((icmp_ln355_reg_1093 == 1'd0) & (src1_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln355_reg_1093_pp0_iter21_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln355_reg_1093 == 1'd0) & (src2_data_stream_V_empty_n == 1'b0)) | ((icmp_ln355_reg_1093 == 1'd0) & (src1_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln355_reg_1093_pp0_iter21_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln355_reg_1093 == 1'd0) & (src2_data_stream_V_empty_n == 1'b0)) | ((icmp_ln355_reg_1093 == 1'd0) & (src1_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((dst_cols_V_out_full_n == 1'b0) | (dst_rows_V_out_full_n == 1'b0) | (dst_cols_V_empty_n == 1'b0) | (dst_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp0_stage0_iter22 = ((icmp_ln355_reg_1093_pp0_iter21_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln355_reg_1093 == 1'd0) & (src2_data_stream_V_empty_n == 1'b0)) | ((icmp_ln355_reg_1093 == 1'd0) & (src1_data_stream_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign ashr_ln586_fu_483_p2 = $signed(p_Val2_s_fu_399_p3) >>> zext_ln586_fu_479_p1;

assign ashr_ln623_fu_743_p2 = $signed(p_Val2_s_fu_399_p3) >>> zext_ln623_fu_739_p1;

assign cols_V_fu_302_p0 = dst_cols_V_dout;

assign cols_V_fu_302_p1 = cols_V_fu_302_p0;

assign deleted_zeros_fu_919_p3 = ((and_ln603_6_fu_685_p2[0:0] === 1'b1) ? select_ln639_fu_895_p3 : select_ln639_3_fu_911_p3);

assign dst_cols_V_out_din = dst_cols_V_dout;

assign dst_data_stream_V_din = ((and_ln340_1_fu_1059_p2[0:0] === 1'b1) ? select_ln340_fu_1008_p3 : select_ln571_fu_1041_p3);

assign dst_rows_V_out_din = dst_rows_V_dout;

assign empty_111_fu_933_p2 = (1'd1 ^ and_ln654_fu_927_p2);

assign grp_fu_292_p0 = tmp_reg_1102;

assign grp_fu_295_p0 = tmp_62_reg_1107;

assign i_V_fu_311_p2 = (t_V_reg_251 + 32'd1);

assign icmp_ln354_fu_306_p2 = ((t_V_reg_251 == rows_V_reg_1074) ? 1'b1 : 1'b0);

assign icmp_ln355_fu_317_p2 = ((t_V_4_reg_262 == cols_V_reg_1079) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_407_p2 = ((trunc_ln556_fu_365_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_419_p2 = (($signed(F2_fu_413_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_447_p2 = ((tmp_V_fu_339_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_457_p2 = ((F2_6_fu_431_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln591_fu_523_p2 = (($signed(F2_fu_413_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_473_p2 = ((tmp_64_fu_463_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln621_fu_719_p2 = (($signed(pos1_fu_691_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln631_fu_779_p2 = (($signed(pos2_fu_701_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln641_fu_833_p2 = ((Range2_V_3_fu_795_p2 == 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln642_fu_851_p2 = ((pos2_fu_701_p2 == 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln833_fu_353_p2 = ((tmp_V_fu_339_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln837_fu_359_p2 = ((tmp_V_5_fu_349_p1 != 52'd0) ? 1'b1 : 1'b0);

assign j_V_fu_322_p2 = (t_V_4_reg_262 + 32'd1);

assign lD_fu_749_p1 = ashr_ln623_fu_743_p2[0:0];

assign man_V_1_fu_393_p2 = (54'd0 - p_Result_21_fu_389_p1);

assign or_ln340_fu_1002_p2 = (xor_ln340_fu_987_p2 | xor_ln340_1_fu_997_p2);

assign or_ln571_3_fu_1048_p2 = (icmp_ln571_reg_1164 | and_ln428_fu_983_p2);

assign or_ln571_4_fu_1036_p2 = (underflow_reg_1176 | or_ln571_fu_1030_p2);

assign or_ln571_fu_1030_p2 = (and_ln571_fu_1025_p2 | and_ln428_fu_983_p2);

assign or_ln581_fu_641_p2 = (icmp_ln582_fu_447_p2 | icmp_ln581_fu_419_p2);

assign or_ln603_fu_673_p2 = (xor_ln603_fu_667_p2 | or_ln581_fu_641_p2);

assign or_ln639_fu_875_p2 = (xor_ln639_3_fu_869_p2 | tmp_69_fu_725_p3);

assign or_ln645_fu_863_p2 = (xor_ln621_3_fu_733_p2 | Range1_all_zeros_3_fu_857_p2);

assign or_ln658_1_fu_977_p2 = (or_ln658_fu_971_p2 | deleted_zeros_fu_919_p3);

assign or_ln658_fu_971_p2 = (xor_ln621_fu_939_p2 | p_Result_20_fu_369_p3);

assign p_Result_20_fu_369_p3 = p_Val2_22_fu_336_p1[32'd63];

assign p_Result_21_fu_389_p1 = tmp_1_i_fu_381_p3;

assign p_Result_22_fu_555_p3 = p_Val2_23_fu_515_p3[32'd7];

assign p_Result_23_fu_711_p3 = p_Val2_25_fu_659_p3[32'd7];

assign p_Result_s_fu_539_p3 = p_Val2_s_fu_399_p3[zext_ln591_fu_535_p1];

assign p_Val2_22_fu_336_p1 = sum_reg_1147;

assign p_Val2_23_fu_515_p3 = ((icmp_ln585_fu_457_p2[0:0] === 1'b1) ? trunc_ln586_fu_489_p1 : select_ln588_fu_501_p3);

assign p_Val2_24_fu_567_p2 = (p_Val2_23_fu_515_p3 + zext_ln415_fu_563_p1);

assign p_Val2_25_fu_659_p3 = ((and_ln603_fu_653_p2[0:0] === 1'b1) ? shl_ln604_fu_509_p2 : select_ln403_3_fu_633_p3);

assign p_Val2_s_fu_399_p3 = ((p_Result_20_fu_369_p3[0:0] === 1'b1) ? man_V_1_fu_393_p2 : p_Result_21_fu_389_p1);

assign pos1_fu_691_p2 = (12'd8 + F2_fu_413_p2);

assign pos2_fu_701_p2 = (12'd9 + F2_fu_413_p2);

assign qb_fu_547_p3 = ((icmp_ln591_fu_523_p2[0:0] === 1'b1) ? p_Result_20_fu_369_p3 : p_Result_s_fu_539_p3);

assign r_V_fu_801_p2 = 54'd18014398509481983 >> zext_ln635_fu_791_p1;

assign rows_V_fu_298_p0 = dst_rows_V_dout;

assign rows_V_fu_298_p1 = rows_V_fu_298_p0;

assign select_ln340_fu_1008_p3 = ((and_ln340_fu_992_p2[0:0] === 1'b1) ? p_Val2_25_reg_1170 : 8'd255);

assign select_ln403_3_fu_633_p3 = ((and_ln403_3_fu_627_p2[0:0] === 1'b1) ? p_Val2_24_fu_567_p2 : select_ln403_fu_613_p3);

assign select_ln403_fu_613_p3 = ((and_ln403_fu_607_p2[0:0] === 1'b1) ? p_Val2_24_fu_567_p2 : select_ln582_fu_587_p3);

assign select_ln571_fu_1041_p3 = ((or_ln571_4_fu_1036_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_25_reg_1170);

assign select_ln582_fu_587_p3 = ((icmp_ln582_fu_447_p2[0:0] === 1'b1) ? trunc_ln583_fu_453_p1 : 8'd0);

assign select_ln588_fu_501_p3 = ((tmp_65_fu_493_p3[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln631_fu_813_p3 = ((and_ln631_fu_785_p2[0:0] === 1'b1) ? Range2_all_ones_fu_807_p2 : xor_ln631_fu_773_p2);

assign select_ln639_3_fu_911_p3 = ((and_ln639_fu_821_p2[0:0] === 1'b1) ? and_ln641_fu_845_p2 : select_ln642_3_fu_903_p3);

assign select_ln639_fu_895_p3 = ((and_ln639_fu_821_p2[0:0] === 1'b1) ? Range1_all_ones_fu_827_p2 : select_ln642_fu_887_p3);

assign select_ln642_3_fu_903_p3 = ((and_ln642_fu_881_p2[0:0] === 1'b1) ? Range1_all_zeros_fu_839_p2 : or_ln645_fu_863_p2);

assign select_ln642_fu_887_p3 = ((and_ln642_fu_881_p2[0:0] === 1'b1) ? Range1_all_ones_3_fu_759_p2 : xor_ln621_3_fu_733_p2);

assign sext_ln581_fu_443_p1 = F2_6_fu_431_p3;

assign sext_ln618_fu_697_p1 = pos1_fu_691_p2;

assign sext_ln619_fu_707_p1 = pos2_fu_701_p2;

assign shl_ln604_fu_509_p2 = trunc_ln583_fu_453_p1 << trunc_ln581_fu_439_p1;

assign start_out = real_start;

assign sub_ln581_fu_425_p2 = (12'd0 - F2_fu_413_p2);

assign tmp_1_i_fu_381_p3 = {{1'd1}, {tmp_V_5_fu_349_p1}};

assign tmp_64_fu_463_p4 = {{F2_6_fu_431_p3[11:3]}};

assign tmp_65_fu_493_p3 = p_Val2_22_fu_336_p1[32'd63];

assign tmp_67_fu_573_p3 = p_Val2_24_fu_567_p2[32'd7];

assign tmp_69_fu_725_p3 = pos1_fu_691_p2[32'd11];

assign tmp_70_fu_765_p3 = pos2_fu_701_p2[32'd11];

assign tmp_V_5_fu_349_p1 = p_Val2_22_fu_336_p1[51:0];

assign tmp_V_fu_339_p4 = {{p_Val2_22_fu_336_p1[62:52]}};

assign trunc_ln556_fu_365_p1 = p_Val2_22_fu_336_p1[62:0];

assign trunc_ln581_fu_439_p1 = F2_6_fu_431_p3[7:0];

assign trunc_ln583_fu_453_p1 = p_Val2_s_fu_399_p3[7:0];

assign trunc_ln586_fu_489_p1 = ashr_ln586_fu_483_p2[7:0];

assign underflow_fu_963_p3 = ((and_ln557_fu_957_p2[0:0] === 1'b1) ? empty_111_fu_933_p2 : and_ln621_5_fu_951_p2);

assign xor_ln340_1_fu_997_p2 = (or_ln658_1_reg_1182 ^ 1'd1);

assign xor_ln340_fu_987_p2 = (underflow_reg_1176 ^ 1'd1);

assign xor_ln403_fu_621_p2 = (p_Result_22_fu_555_p3 ^ 1'd1);

assign xor_ln416_fu_581_p2 = (tmp_67_fu_573_p3 ^ 1'd1);

assign xor_ln428_fu_1019_p2 = (1'd1 ^ and_ln428_3_fu_1015_p2);

assign xor_ln571_fu_1053_p2 = (or_ln571_3_fu_1048_p2 ^ 1'd1);

assign xor_ln581_fu_647_p2 = (or_ln581_fu_641_p2 ^ 1'd1);

assign xor_ln582_fu_595_p2 = (icmp_ln582_fu_447_p2 ^ 1'd1);

assign xor_ln603_fu_667_p2 = (icmp_ln603_fu_473_p2 ^ 1'd1);

assign xor_ln621_3_fu_733_p2 = (tmp_69_fu_725_p3 ^ 1'd1);

assign xor_ln621_fu_939_p2 = (icmp_ln621_fu_719_p2 ^ 1'd1);

assign xor_ln631_fu_773_p2 = (tmp_70_fu_765_p3 ^ 1'd1);

assign xor_ln639_3_fu_869_p2 = (icmp_ln631_fu_779_p2 ^ 1'd1);

assign zext_ln415_fu_563_p1 = qb_fu_547_p3;

assign zext_ln461_fu_377_p1 = tmp_V_fu_339_p4;

assign zext_ln586_fu_479_p1 = $unsigned(sext_ln581_fu_443_p1);

assign zext_ln591_fu_535_p1 = add_ln591_fu_529_p2;

assign zext_ln623_fu_739_p1 = $unsigned(sext_ln618_fu_697_p1);

assign zext_ln635_fu_791_p1 = $unsigned(sext_ln619_fu_707_p1);

endmodule //AddWeighted
