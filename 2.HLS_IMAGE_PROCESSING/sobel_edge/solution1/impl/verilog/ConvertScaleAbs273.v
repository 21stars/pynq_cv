// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ConvertScaleAbs273 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read,
        p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state11 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] p_src_data_stream_V_dout;
input   p_src_data_stream_V_empty_n;
output   p_src_data_stream_V_read;
output  [7:0] p_dst_data_stream_V_din;
input   p_dst_data_stream_V_full_n;
output   p_dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_data_stream_V_read;
reg p_dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln2527_reg_834;
reg    p_dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] icmp_ln2527_reg_834_pp0_iter6_reg;
reg   [10:0] j_0_reg_160;
wire   [0:0] icmp_ln2526_fu_174_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] i_fu_180_p2;
reg   [10:0] i_reg_829;
wire   [0:0] icmp_ln2527_fu_186_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
reg    ap_block_state10_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln2527_reg_834_pp0_iter1_reg;
reg   [0:0] icmp_ln2527_reg_834_pp0_iter2_reg;
reg   [0:0] icmp_ln2527_reg_834_pp0_iter3_reg;
reg   [0:0] icmp_ln2527_reg_834_pp0_iter4_reg;
reg   [0:0] icmp_ln2527_reg_834_pp0_iter5_reg;
wire   [10:0] j_fu_192_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_reg_843;
wire   [63:0] grp_fu_171_p1;
reg   [63:0] x_assign_reg_853;
wire   [7:0] tmp_55_fu_817_p3;
reg   [7:0] tmp_55_reg_858;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [10:0] i_0_reg_149;
reg    ap_block_state1;
wire    ap_CS_fsm_state11;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] grp_fu_171_p0;
wire   [63:0] p_Val2_s_fu_202_p1;
wire   [10:0] tmp_V_fu_209_p4;
wire   [51:0] tmp_V_3_fu_219_p1;
wire   [0:0] icmp_ln833_fu_223_p2;
wire   [0:0] icmp_ln837_fu_229_p2;
wire   [52:0] tmp_1_i_fu_245_p3;
wire   [62:0] trunc_ln368_fu_205_p1;
wire   [11:0] zext_ln461_fu_241_p1;
wire   [11:0] F2_fu_263_p2;
wire   [0:0] icmp_ln581_fu_269_p2;
wire   [11:0] sub_ln581_fu_275_p2;
wire  signed [11:0] F2_2_fu_281_p3;
wire   [8:0] tmp_50_fu_313_p4;
wire  signed [31:0] sext_ln581_fu_293_p1;
wire   [53:0] p_Result_6_fu_253_p1;
wire   [53:0] zext_ln586_fu_329_p1;
wire   [53:0] ashr_ln586_fu_333_p2;
wire   [7:0] trunc_ln583_fu_303_p1;
wire   [7:0] trunc_ln581_fu_289_p1;
wire   [0:0] icmp_ln585_fu_307_p2;
wire   [7:0] trunc_ln586_fu_339_p1;
wire   [11:0] add_ln591_fu_363_p2;
wire   [31:0] zext_ln591_fu_369_p1;
wire   [0:0] icmp_ln591_fu_357_p2;
wire   [0:0] p_Result_s_fu_373_p3;
wire   [7:0] p_Val2_14_fu_349_p3;
wire   [0:0] qb_fu_381_p3;
wire   [7:0] zext_ln415_fu_397_p1;
wire   [7:0] p_Val2_15_fu_401_p2;
wire   [0:0] tmp_52_fu_407_p3;
wire   [0:0] icmp_ln582_fu_297_p2;
wire   [0:0] xor_ln582_fu_429_p2;
wire   [0:0] and_ln581_fu_435_p2;
wire   [0:0] p_Result_7_fu_389_p3;
wire   [0:0] and_ln403_fu_441_p2;
wire   [7:0] select_ln582_fu_421_p3;
wire   [0:0] xor_ln403_fu_455_p2;
wire   [0:0] and_ln403_1_fu_461_p2;
wire   [7:0] select_ln403_fu_447_p3;
wire   [0:0] or_ln581_fu_475_p2;
wire   [0:0] icmp_ln603_fu_323_p2;
wire   [0:0] xor_ln581_fu_481_p2;
wire   [0:0] and_ln603_fu_487_p2;
wire   [7:0] shl_ln604_fu_343_p2;
wire   [7:0] select_ln403_1_fu_467_p3;
wire   [0:0] xor_ln603_fu_501_p2;
wire   [0:0] or_ln603_fu_507_p2;
wire   [0:0] xor_ln416_fu_415_p2;
wire   [0:0] and_ln603_1_fu_513_p2;
wire  signed [11:0] pos1_fu_525_p2;
wire  signed [11:0] pos2_fu_535_p2;
wire   [0:0] tmp_53_fu_551_p3;
wire  signed [31:0] sext_ln618_fu_531_p1;
wire   [53:0] zext_ln623_fu_565_p1;
wire   [53:0] ashr_ln623_fu_569_p2;
wire   [0:0] lD_fu_575_p1;
wire   [0:0] xor_ln621_1_fu_559_p2;
wire   [0:0] and_ln621_fu_579_p2;
wire   [0:0] icmp_ln621_fu_545_p2;
wire   [0:0] tmp_54_fu_591_p3;
wire   [0:0] icmp_ln631_fu_605_p2;
wire   [0:0] xor_ln631_fu_599_p2;
wire  signed [31:0] sext_ln619_fu_541_p1;
wire   [53:0] zext_ln635_fu_617_p1;
wire   [53:0] Range2_V_1_fu_621_p2;
wire   [53:0] r_V_fu_627_p2;
wire   [0:0] and_ln631_fu_611_p2;
wire   [0:0] Range2_all_ones_fu_633_p2;
wire   [0:0] select_ln631_fu_639_p3;
wire   [0:0] Range1_all_ones_1_fu_585_p2;
wire   [0:0] icmp_ln641_fu_659_p2;
wire   [0:0] Range1_all_zeros_fu_665_p2;
wire   [0:0] Range1_all_zeros_1_fu_683_p2;
wire   [0:0] xor_ln639_1_fu_695_p2;
wire   [0:0] icmp_ln642_fu_677_p2;
wire   [0:0] or_ln639_fu_701_p2;
wire   [0:0] and_ln642_fu_707_p2;
wire   [0:0] and_ln639_fu_647_p2;
wire   [0:0] Range1_all_ones_fu_653_p2;
wire   [0:0] select_ln642_fu_713_p3;
wire   [0:0] or_ln645_fu_689_p2;
wire   [0:0] and_ln641_fu_671_p2;
wire   [0:0] select_ln642_1_fu_729_p3;
wire   [0:0] and_ln603_2_fu_519_p2;
wire   [0:0] select_ln639_fu_721_p3;
wire   [0:0] select_ln639_1_fu_737_p3;
wire   [0:0] xor_ln621_fu_753_p2;
wire   [0:0] deleted_zeros_fu_745_p3;
wire   [0:0] or_ln658_fu_759_p2;
wire   [7:0] p_Val2_16_fu_493_p3;
wire   [0:0] and_ln428_1_fu_773_p2;
wire   [0:0] icmp_ln571_fu_257_p2;
wire   [0:0] xor_ln428_fu_779_p2;
wire   [0:0] and_ln571_fu_785_p2;
wire   [0:0] and_ln428_fu_235_p2;
wire   [0:0] or_ln571_fu_791_p2;
wire   [0:0] or_ln571_1_fu_805_p2;
wire   [0:0] xor_ln571_fu_811_p2;
wire   [7:0] select_ln340_fu_765_p3;
wire   [7:0] select_ln571_fu_797_p3;
reg    grp_fu_171_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

sobel_accel_sitodtde #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sobel_accel_sitodtde_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_171_p0),
    .ce(grp_fu_171_ce),
    .dout(grp_fu_171_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln2526_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln2526_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((icmp_ln2526_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_reg_149 <= i_reg_829;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_149 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_160 <= j_fu_192_p2;
    end else if (((icmp_ln2526_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_160 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_829 <= i_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln2527_reg_834 <= icmp_ln2527_fu_186_p2;
        icmp_ln2527_reg_834_pp0_iter1_reg <= icmp_ln2527_reg_834;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln2527_reg_834_pp0_iter2_reg <= icmp_ln2527_reg_834_pp0_iter1_reg;
        icmp_ln2527_reg_834_pp0_iter3_reg <= icmp_ln2527_reg_834_pp0_iter2_reg;
        icmp_ln2527_reg_834_pp0_iter4_reg <= icmp_ln2527_reg_834_pp0_iter3_reg;
        icmp_ln2527_reg_834_pp0_iter5_reg <= icmp_ln2527_reg_834_pp0_iter4_reg;
        icmp_ln2527_reg_834_pp0_iter6_reg <= icmp_ln2527_reg_834_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_834_pp0_iter5_reg == 1'd0))) begin
        tmp_55_reg_858 <= tmp_55_fu_817_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_834 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_843 <= p_src_data_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_834_pp0_iter4_reg == 1'd0))) begin
        x_assign_reg_853 <= grp_fu_171_p1;
    end
end

always @ (*) begin
    if ((icmp_ln2527_fu_186_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2526_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2526_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_171_ce = 1'b1;
    end else begin
        grp_fu_171_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2527_reg_834_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        p_dst_data_stream_V_blk_n = p_dst_data_stream_V_full_n;
    end else begin
        p_dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_834_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        p_dst_data_stream_V_write = 1'b1;
    end else begin
        p_dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2527_reg_834 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_V_blk_n = p_src_data_stream_V_empty_n;
    end else begin
        p_src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_834 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_V_read = 1'b1;
    end else begin
        p_src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln2526_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln2527_fu_186_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln2527_fu_186_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_2_fu_281_p3 = ((icmp_ln581_fu_269_p2[0:0] === 1'b1) ? F2_fu_263_p2 : sub_ln581_fu_275_p2);

assign F2_fu_263_p2 = (12'd1075 - zext_ln461_fu_241_p1);

assign Range1_all_ones_1_fu_585_p2 = (icmp_ln621_fu_545_p2 & and_ln621_fu_579_p2);

assign Range1_all_ones_fu_653_p2 = (select_ln631_fu_639_p3 & Range1_all_ones_1_fu_585_p2);

assign Range1_all_zeros_1_fu_683_p2 = ((p_Result_6_fu_253_p1 == 54'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_665_p2 = (1'd1 ^ Range1_all_ones_1_fu_585_p2);

assign Range2_V_1_fu_621_p2 = p_Result_6_fu_253_p1 >> zext_ln635_fu_617_p1;

assign Range2_all_ones_fu_633_p2 = ((Range2_V_1_fu_621_p2 == r_V_fu_627_p2) ? 1'b1 : 1'b0);

assign add_ln591_fu_363_p2 = ($signed(12'd4095) + $signed(F2_fu_263_p2));

assign and_ln403_1_fu_461_p2 = (xor_ln403_fu_455_p2 & and_ln581_fu_435_p2);

assign and_ln403_fu_441_p2 = (p_Result_7_fu_389_p3 & and_ln581_fu_435_p2);

assign and_ln428_1_fu_773_p2 = (icmp_ln837_fu_229_p2 & icmp_ln833_fu_223_p2);

assign and_ln428_fu_235_p2 = (icmp_ln837_fu_229_p2 & icmp_ln833_fu_223_p2);

assign and_ln571_fu_785_p2 = (xor_ln428_fu_779_p2 & icmp_ln571_fu_257_p2);

assign and_ln581_fu_435_p2 = (xor_ln582_fu_429_p2 & icmp_ln581_fu_269_p2);

assign and_ln603_1_fu_513_p2 = (xor_ln416_fu_415_p2 & or_ln603_fu_507_p2);

assign and_ln603_2_fu_519_p2 = (and_ln603_1_fu_513_p2 & and_ln403_fu_441_p2);

assign and_ln603_fu_487_p2 = (xor_ln581_fu_481_p2 & icmp_ln603_fu_323_p2);

assign and_ln621_fu_579_p2 = (xor_ln621_1_fu_559_p2 & lD_fu_575_p1);

assign and_ln631_fu_611_p2 = (xor_ln631_fu_599_p2 & icmp_ln631_fu_605_p2);

assign and_ln639_fu_647_p2 = (xor_ln621_1_fu_559_p2 & icmp_ln631_fu_605_p2);

assign and_ln641_fu_671_p2 = (icmp_ln641_fu_659_p2 & Range1_all_zeros_fu_665_p2);

assign and_ln642_fu_707_p2 = (or_ln639_fu_701_p2 & icmp_ln642_fu_677_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln2527_reg_834_pp0_iter6_reg == 1'd0) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((icmp_ln2527_reg_834 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln2527_reg_834_pp0_iter6_reg == 1'd0) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((icmp_ln2527_reg_834 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln2527_reg_834_pp0_iter6_reg == 1'd0) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((icmp_ln2527_reg_834 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter7 = ((icmp_ln2527_reg_834_pp0_iter6_reg == 1'd0) & (p_dst_data_stream_V_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln2527_reg_834 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ashr_ln586_fu_333_p2 = $signed(p_Result_6_fu_253_p1) >>> zext_ln586_fu_329_p1;

assign ashr_ln623_fu_569_p2 = $signed(p_Result_6_fu_253_p1) >>> zext_ln623_fu_565_p1;

assign deleted_zeros_fu_745_p3 = ((and_ln603_2_fu_519_p2[0:0] === 1'b1) ? select_ln639_fu_721_p3 : select_ln639_1_fu_737_p3);

assign grp_fu_171_p0 = $signed(tmp_reg_843);

assign i_fu_180_p2 = (i_0_reg_149 + 11'd1);

assign icmp_ln2526_fu_174_p2 = ((i_0_reg_149 == 11'd1080) ? 1'b1 : 1'b0);

assign icmp_ln2527_fu_186_p2 = ((j_0_reg_160 == 11'd1920) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_257_p2 = ((trunc_ln368_fu_205_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_269_p2 = (($signed(F2_fu_263_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_297_p2 = ((tmp_V_fu_209_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_307_p2 = ((F2_2_fu_281_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln591_fu_357_p2 = (($signed(F2_fu_263_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_323_p2 = ((tmp_50_fu_313_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln621_fu_545_p2 = (($signed(pos1_fu_525_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln631_fu_605_p2 = (($signed(pos2_fu_535_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln641_fu_659_p2 = ((Range2_V_1_fu_621_p2 == 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln642_fu_677_p2 = ((pos2_fu_535_p2 == 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln833_fu_223_p2 = ((tmp_V_fu_209_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln837_fu_229_p2 = ((tmp_V_3_fu_219_p1 != 52'd0) ? 1'b1 : 1'b0);

assign j_fu_192_p2 = (j_0_reg_160 + 11'd1);

assign lD_fu_575_p1 = ashr_ln623_fu_569_p2[0:0];

assign or_ln571_1_fu_805_p2 = (icmp_ln571_fu_257_p2 | and_ln428_fu_235_p2);

assign or_ln571_fu_791_p2 = (and_ln571_fu_785_p2 | and_ln428_fu_235_p2);

assign or_ln581_fu_475_p2 = (icmp_ln582_fu_297_p2 | icmp_ln581_fu_269_p2);

assign or_ln603_fu_507_p2 = (xor_ln603_fu_501_p2 | or_ln581_fu_475_p2);

assign or_ln639_fu_701_p2 = (xor_ln639_1_fu_695_p2 | tmp_53_fu_551_p3);

assign or_ln645_fu_689_p2 = (xor_ln621_1_fu_559_p2 | Range1_all_zeros_1_fu_683_p2);

assign or_ln658_fu_759_p2 = (xor_ln621_fu_753_p2 | deleted_zeros_fu_745_p3);

assign p_Result_6_fu_253_p1 = tmp_1_i_fu_245_p3;

assign p_Result_7_fu_389_p3 = p_Val2_14_fu_349_p3[32'd7];

assign p_Result_s_fu_373_p3 = p_Result_6_fu_253_p1[zext_ln591_fu_369_p1];

assign p_Val2_14_fu_349_p3 = ((icmp_ln585_fu_307_p2[0:0] === 1'b1) ? trunc_ln586_fu_339_p1 : 8'd0);

assign p_Val2_15_fu_401_p2 = (p_Val2_14_fu_349_p3 + zext_ln415_fu_397_p1);

assign p_Val2_16_fu_493_p3 = ((and_ln603_fu_487_p2[0:0] === 1'b1) ? shl_ln604_fu_343_p2 : select_ln403_1_fu_467_p3);

assign p_Val2_s_fu_202_p1 = x_assign_reg_853;

assign p_dst_data_stream_V_din = tmp_55_reg_858;

assign pos1_fu_525_p2 = (12'd8 + F2_fu_263_p2);

assign pos2_fu_535_p2 = (12'd9 + F2_fu_263_p2);

assign qb_fu_381_p3 = ((icmp_ln591_fu_357_p2[0:0] === 1'b1) ? 1'd0 : p_Result_s_fu_373_p3);

assign r_V_fu_627_p2 = 54'd18014398509481983 >> zext_ln635_fu_617_p1;

assign select_ln340_fu_765_p3 = ((or_ln658_fu_759_p2[0:0] === 1'b1) ? p_Val2_16_fu_493_p3 : 8'd255);

assign select_ln403_1_fu_467_p3 = ((and_ln403_1_fu_461_p2[0:0] === 1'b1) ? p_Val2_15_fu_401_p2 : select_ln403_fu_447_p3);

assign select_ln403_fu_447_p3 = ((and_ln403_fu_441_p2[0:0] === 1'b1) ? p_Val2_15_fu_401_p2 : select_ln582_fu_421_p3);

assign select_ln571_fu_797_p3 = ((or_ln571_fu_791_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_16_fu_493_p3);

assign select_ln582_fu_421_p3 = ((icmp_ln582_fu_297_p2[0:0] === 1'b1) ? trunc_ln583_fu_303_p1 : 8'd0);

assign select_ln631_fu_639_p3 = ((and_ln631_fu_611_p2[0:0] === 1'b1) ? Range2_all_ones_fu_633_p2 : xor_ln631_fu_599_p2);

assign select_ln639_1_fu_737_p3 = ((and_ln639_fu_647_p2[0:0] === 1'b1) ? and_ln641_fu_671_p2 : select_ln642_1_fu_729_p3);

assign select_ln639_fu_721_p3 = ((and_ln639_fu_647_p2[0:0] === 1'b1) ? Range1_all_ones_fu_653_p2 : select_ln642_fu_713_p3);

assign select_ln642_1_fu_729_p3 = ((and_ln642_fu_707_p2[0:0] === 1'b1) ? Range1_all_zeros_fu_665_p2 : or_ln645_fu_689_p2);

assign select_ln642_fu_713_p3 = ((and_ln642_fu_707_p2[0:0] === 1'b1) ? Range1_all_ones_1_fu_585_p2 : xor_ln621_1_fu_559_p2);

assign sext_ln581_fu_293_p1 = F2_2_fu_281_p3;

assign sext_ln618_fu_531_p1 = pos1_fu_525_p2;

assign sext_ln619_fu_541_p1 = pos2_fu_535_p2;

assign shl_ln604_fu_343_p2 = trunc_ln583_fu_303_p1 << trunc_ln581_fu_289_p1;

assign sub_ln581_fu_275_p2 = (12'd0 - F2_fu_263_p2);

assign tmp_1_i_fu_245_p3 = {{1'd1}, {tmp_V_3_fu_219_p1}};

assign tmp_50_fu_313_p4 = {{F2_2_fu_281_p3[11:3]}};

assign tmp_52_fu_407_p3 = p_Val2_15_fu_401_p2[32'd7];

assign tmp_53_fu_551_p3 = pos1_fu_525_p2[32'd11];

assign tmp_54_fu_591_p3 = pos2_fu_535_p2[32'd11];

assign tmp_55_fu_817_p3 = ((xor_ln571_fu_811_p2[0:0] === 1'b1) ? select_ln340_fu_765_p3 : select_ln571_fu_797_p3);

assign tmp_V_3_fu_219_p1 = p_Val2_s_fu_202_p1[51:0];

assign tmp_V_fu_209_p4 = {{p_Val2_s_fu_202_p1[62:52]}};

assign trunc_ln368_fu_205_p1 = p_Val2_s_fu_202_p1[62:0];

assign trunc_ln581_fu_289_p1 = F2_2_fu_281_p3[7:0];

assign trunc_ln583_fu_303_p1 = p_Val2_s_fu_202_p1[7:0];

assign trunc_ln586_fu_339_p1 = ashr_ln586_fu_333_p2[7:0];

assign xor_ln403_fu_455_p2 = (p_Result_7_fu_389_p3 ^ 1'd1);

assign xor_ln416_fu_415_p2 = (tmp_52_fu_407_p3 ^ 1'd1);

assign xor_ln428_fu_779_p2 = (1'd1 ^ and_ln428_1_fu_773_p2);

assign xor_ln571_fu_811_p2 = (or_ln571_1_fu_805_p2 ^ 1'd1);

assign xor_ln581_fu_481_p2 = (or_ln581_fu_475_p2 ^ 1'd1);

assign xor_ln582_fu_429_p2 = (icmp_ln582_fu_297_p2 ^ 1'd1);

assign xor_ln603_fu_501_p2 = (icmp_ln603_fu_323_p2 ^ 1'd1);

assign xor_ln621_1_fu_559_p2 = (tmp_53_fu_551_p3 ^ 1'd1);

assign xor_ln621_fu_753_p2 = (icmp_ln621_fu_545_p2 ^ 1'd1);

assign xor_ln631_fu_599_p2 = (tmp_54_fu_591_p3 ^ 1'd1);

assign xor_ln639_1_fu_695_p2 = (icmp_ln631_fu_605_p2 ^ 1'd1);

assign zext_ln415_fu_397_p1 = qb_fu_381_p3;

assign zext_ln461_fu_241_p1 = tmp_V_fu_209_p4;

assign zext_ln586_fu_329_p1 = $unsigned(sext_ln581_fu_293_p1);

assign zext_ln591_fu_369_p1 = add_ln591_fu_363_p2;

assign zext_ln623_fu_565_p1 = $unsigned(sext_ln618_fu_531_p1);

assign zext_ln635_fu_617_p1 = $unsigned(sext_ln619_fu_541_p1);

endmodule //ConvertScaleAbs273
