-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ConvertScaleAbs273 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_src_data_stream_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of ConvertScaleAbs273 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_9 : STD_LOGIC_VECTOR (11 downto 0) := "000000001001";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln2527_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln2527_reg_834_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_160 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln2526_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_180_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_829 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln2527_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln2527_reg_834_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2527_reg_834_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2527_reg_834_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2527_reg_834_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2527_reg_834_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_192_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_reg_843 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_853 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_817_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal i_0_reg_149 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_171_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_209_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_3_fu_219_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln833_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln837_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_fu_245_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal trunc_ln368_fu_205_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_241_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_263_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln581_fu_275_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_2_fu_281_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_50_fu_313_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln581_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_fu_253_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln586_fu_329_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_333_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln583_fu_303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln581_fu_289_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln585_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_fu_339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln591_fu_363_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln591_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln591_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_14_fu_349_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_fu_381_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_397_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_15_fu_401_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_407_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_389_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln582_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln403_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln403_fu_447_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln581_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln403_1_fu_467_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln603_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_1_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_fu_525_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos2_fu_535_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln618_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln623_fu_565_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln623_fu_569_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal lD_fu_575_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_1_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln621_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_591_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln631_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln631_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln619_fu_541_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln635_fu_617_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_1_fu_621_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal r_V_fu_627_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln631_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln631_fu_639_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln641_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln639_1_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln642_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln639_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln642_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln639_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln642_fu_713_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln645_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln641_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln642_1_fu_729_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_2_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln639_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln639_1_fu_737_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_745_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln658_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_16_fu_493_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln428_1_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln428_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln571_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln428_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_1_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_765_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln571_fu_797_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_171_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component sobel_accel_sitodtde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    sobel_accel_sitodtde_U80 : component sobel_accel_sitodtde
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_171_p0,
        ce => grp_fu_171_ce,
        dout => grp_fu_171_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln2526_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln2526_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((icmp_ln2526_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_reg_149 <= i_reg_829;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_149 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln2527_fu_186_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_160 <= j_fu_192_p2;
            elsif (((icmp_ln2526_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_160 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_829 <= i_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln2527_reg_834 <= icmp_ln2527_fu_186_p2;
                icmp_ln2527_reg_834_pp0_iter1_reg <= icmp_ln2527_reg_834;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln2527_reg_834_pp0_iter2_reg <= icmp_ln2527_reg_834_pp0_iter1_reg;
                icmp_ln2527_reg_834_pp0_iter3_reg <= icmp_ln2527_reg_834_pp0_iter2_reg;
                icmp_ln2527_reg_834_pp0_iter4_reg <= icmp_ln2527_reg_834_pp0_iter3_reg;
                icmp_ln2527_reg_834_pp0_iter5_reg <= icmp_ln2527_reg_834_pp0_iter4_reg;
                icmp_ln2527_reg_834_pp0_iter6_reg <= icmp_ln2527_reg_834_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln2527_reg_834_pp0_iter5_reg = ap_const_lv1_0))) then
                tmp_55_reg_858 <= tmp_55_fu_817_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln2527_reg_834 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_843 <= p_src_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln2527_reg_834_pp0_iter4_reg = ap_const_lv1_0))) then
                x_assign_reg_853 <= grp_fu_171_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, icmp_ln2526_fu_174_p2, ap_CS_fsm_state2, icmp_ln2527_fu_186_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln2526_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln2527_fu_186_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln2527_fu_186_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    F2_2_fu_281_p3 <= 
        F2_fu_263_p2 when (icmp_ln581_fu_269_p2(0) = '1') else 
        sub_ln581_fu_275_p2;
    F2_fu_263_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_241_p1));
    Range1_all_ones_1_fu_585_p2 <= (icmp_ln621_fu_545_p2 and and_ln621_fu_579_p2);
    Range1_all_ones_fu_653_p2 <= (select_ln631_fu_639_p3 and Range1_all_ones_1_fu_585_p2);
    Range1_all_zeros_1_fu_683_p2 <= "1" when (p_Result_6_fu_253_p1 = ap_const_lv54_0) else "0";
    Range1_all_zeros_fu_665_p2 <= (ap_const_lv1_1 xor Range1_all_ones_1_fu_585_p2);
    Range2_V_1_fu_621_p2 <= std_logic_vector(shift_right(unsigned(p_Result_6_fu_253_p1),to_integer(unsigned('0' & zext_ln635_fu_617_p1(31-1 downto 0)))));
    Range2_all_ones_fu_633_p2 <= "1" when (Range2_V_1_fu_621_p2 = r_V_fu_627_p2) else "0";
    add_ln591_fu_363_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(F2_fu_263_p2));
    and_ln403_1_fu_461_p2 <= (xor_ln403_fu_455_p2 and and_ln581_fu_435_p2);
    and_ln403_fu_441_p2 <= (p_Result_7_fu_389_p3 and and_ln581_fu_435_p2);
    and_ln428_1_fu_773_p2 <= (icmp_ln837_fu_229_p2 and icmp_ln833_fu_223_p2);
    and_ln428_fu_235_p2 <= (icmp_ln837_fu_229_p2 and icmp_ln833_fu_223_p2);
    and_ln571_fu_785_p2 <= (xor_ln428_fu_779_p2 and icmp_ln571_fu_257_p2);
    and_ln581_fu_435_p2 <= (xor_ln582_fu_429_p2 and icmp_ln581_fu_269_p2);
    and_ln603_1_fu_513_p2 <= (xor_ln416_fu_415_p2 and or_ln603_fu_507_p2);
    and_ln603_2_fu_519_p2 <= (and_ln603_1_fu_513_p2 and and_ln403_fu_441_p2);
    and_ln603_fu_487_p2 <= (xor_ln581_fu_481_p2 and icmp_ln603_fu_323_p2);
    and_ln621_fu_579_p2 <= (xor_ln621_1_fu_559_p2 and lD_fu_575_p1);
    and_ln631_fu_611_p2 <= (xor_ln631_fu_599_p2 and icmp_ln631_fu_605_p2);
    and_ln639_fu_647_p2 <= (xor_ln621_1_fu_559_p2 and icmp_ln631_fu_605_p2);
    and_ln641_fu_671_p2 <= (icmp_ln641_fu_659_p2 and Range1_all_zeros_fu_665_p2);
    and_ln642_fu_707_p2 <= (or_ln639_fu_701_p2 and icmp_ln642_fu_677_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln2527_reg_834, ap_enable_reg_pp0_iter7, icmp_ln2527_reg_834_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln2527_reg_834_pp0_iter6_reg = ap_const_lv1_0) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln2527_reg_834 = ap_const_lv1_0) and (p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln2527_reg_834, ap_enable_reg_pp0_iter7, icmp_ln2527_reg_834_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln2527_reg_834_pp0_iter6_reg = ap_const_lv1_0) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln2527_reg_834 = ap_const_lv1_0) and (p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln2527_reg_834, ap_enable_reg_pp0_iter7, icmp_ln2527_reg_834_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln2527_reg_834_pp0_iter6_reg = ap_const_lv1_0) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln2527_reg_834 = ap_const_lv1_0) and (p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter7_assign_proc : process(p_dst_data_stream_V_full_n, icmp_ln2527_reg_834_pp0_iter6_reg)
    begin
                ap_block_state10_pp0_stage0_iter7 <= ((icmp_ln2527_reg_834_pp0_iter6_reg = ap_const_lv1_0) and (p_dst_data_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_V_empty_n, icmp_ln2527_reg_834)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln2527_reg_834 = ap_const_lv1_0) and (p_src_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln2527_fu_186_p2)
    begin
        if ((icmp_ln2527_fu_186_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln2526_fu_174_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln2526_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln2526_fu_174_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln2526_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_333_p2 <= std_logic_vector(shift_right(signed(p_Result_6_fu_253_p1),to_integer(unsigned('0' & zext_ln586_fu_329_p1(31-1 downto 0)))));
    ashr_ln623_fu_569_p2 <= std_logic_vector(shift_right(signed(p_Result_6_fu_253_p1),to_integer(unsigned('0' & zext_ln623_fu_565_p1(31-1 downto 0)))));
    deleted_zeros_fu_745_p3 <= 
        select_ln639_fu_721_p3 when (and_ln603_2_fu_519_p2(0) = '1') else 
        select_ln639_1_fu_737_p3;

    grp_fu_171_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_171_ce <= ap_const_logic_1;
        else 
            grp_fu_171_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_171_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_843),32));

    i_fu_180_p2 <= std_logic_vector(unsigned(i_0_reg_149) + unsigned(ap_const_lv11_1));
    icmp_ln2526_fu_174_p2 <= "1" when (i_0_reg_149 = ap_const_lv11_438) else "0";
    icmp_ln2527_fu_186_p2 <= "1" when (j_0_reg_160 = ap_const_lv11_780) else "0";
    icmp_ln571_fu_257_p2 <= "1" when (trunc_ln368_fu_205_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_269_p2 <= "1" when (signed(F2_fu_263_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln582_fu_297_p2 <= "1" when (tmp_V_fu_209_p4 = ap_const_lv11_433) else "0";
    icmp_ln585_fu_307_p2 <= "1" when (unsigned(F2_2_fu_281_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln591_fu_357_p2 <= "1" when (signed(F2_fu_263_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_323_p2 <= "1" when (tmp_50_fu_313_p4 = ap_const_lv9_0) else "0";
    icmp_ln621_fu_545_p2 <= "1" when (signed(pos1_fu_525_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln631_fu_605_p2 <= "1" when (signed(pos2_fu_535_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln641_fu_659_p2 <= "1" when (Range2_V_1_fu_621_p2 = ap_const_lv54_0) else "0";
    icmp_ln642_fu_677_p2 <= "1" when (pos2_fu_535_p2 = ap_const_lv12_36) else "0";
    icmp_ln833_fu_223_p2 <= "1" when (tmp_V_fu_209_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln837_fu_229_p2 <= "0" when (tmp_V_3_fu_219_p1 = ap_const_lv52_0) else "1";
    j_fu_192_p2 <= std_logic_vector(unsigned(j_0_reg_160) + unsigned(ap_const_lv11_1));
    lD_fu_575_p1 <= ashr_ln623_fu_569_p2(1 - 1 downto 0);
    or_ln571_1_fu_805_p2 <= (icmp_ln571_fu_257_p2 or and_ln428_fu_235_p2);
    or_ln571_fu_791_p2 <= (and_ln571_fu_785_p2 or and_ln428_fu_235_p2);
    or_ln581_fu_475_p2 <= (icmp_ln582_fu_297_p2 or icmp_ln581_fu_269_p2);
    or_ln603_fu_507_p2 <= (xor_ln603_fu_501_p2 or or_ln581_fu_475_p2);
    or_ln639_fu_701_p2 <= (xor_ln639_1_fu_695_p2 or tmp_53_fu_551_p3);
    or_ln645_fu_689_p2 <= (xor_ln621_1_fu_559_p2 or Range1_all_zeros_1_fu_683_p2);
    or_ln658_fu_759_p2 <= (xor_ln621_fu_753_p2 or deleted_zeros_fu_745_p3);
    p_Result_6_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_245_p3),54));
    p_Result_7_fu_389_p3 <= p_Val2_14_fu_349_p3(7 downto 7);
    p_Result_s_fu_373_p3 <= p_Result_6_fu_253_p1(to_integer(unsigned(zext_ln591_fu_369_p1)) downto to_integer(unsigned(zext_ln591_fu_369_p1))) when (to_integer(unsigned(zext_ln591_fu_369_p1))>= 0 and to_integer(unsigned(zext_ln591_fu_369_p1))<=53) else "-";
    p_Val2_14_fu_349_p3 <= 
        trunc_ln586_fu_339_p1 when (icmp_ln585_fu_307_p2(0) = '1') else 
        ap_const_lv8_0;
    p_Val2_15_fu_401_p2 <= std_logic_vector(unsigned(p_Val2_14_fu_349_p3) + unsigned(zext_ln415_fu_397_p1));
    p_Val2_16_fu_493_p3 <= 
        shl_ln604_fu_343_p2 when (and_ln603_fu_487_p2(0) = '1') else 
        select_ln403_1_fu_467_p3;
    p_Val2_s_fu_202_p1 <= x_assign_reg_853;

    p_dst_data_stream_V_blk_n_assign_proc : process(p_dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, icmp_ln2527_reg_834_pp0_iter6_reg)
    begin
        if (((icmp_ln2527_reg_834_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            p_dst_data_stream_V_blk_n <= p_dst_data_stream_V_full_n;
        else 
            p_dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_V_din <= tmp_55_reg_858;

    p_dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln2527_reg_834_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln2527_reg_834_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            p_dst_data_stream_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_V_blk_n_assign_proc : process(p_src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln2527_reg_834)
    begin
        if (((icmp_ln2527_reg_834 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_V_blk_n <= p_src_data_stream_V_empty_n;
        else 
            p_src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln2527_reg_834, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln2527_reg_834 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_src_data_stream_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    pos1_fu_525_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) + unsigned(F2_fu_263_p2));
    pos2_fu_535_p2 <= std_logic_vector(unsigned(ap_const_lv12_9) + unsigned(F2_fu_263_p2));
    qb_fu_381_p3 <= 
        ap_const_lv1_0 when (icmp_ln591_fu_357_p2(0) = '1') else 
        p_Result_s_fu_373_p3;
    r_V_fu_627_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln635_fu_617_p1(31-1 downto 0)))));
    select_ln340_fu_765_p3 <= 
        p_Val2_16_fu_493_p3 when (or_ln658_fu_759_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln403_1_fu_467_p3 <= 
        p_Val2_15_fu_401_p2 when (and_ln403_1_fu_461_p2(0) = '1') else 
        select_ln403_fu_447_p3;
    select_ln403_fu_447_p3 <= 
        p_Val2_15_fu_401_p2 when (and_ln403_fu_441_p2(0) = '1') else 
        select_ln582_fu_421_p3;
    select_ln571_fu_797_p3 <= 
        ap_const_lv8_0 when (or_ln571_fu_791_p2(0) = '1') else 
        p_Val2_16_fu_493_p3;
    select_ln582_fu_421_p3 <= 
        trunc_ln583_fu_303_p1 when (icmp_ln582_fu_297_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln631_fu_639_p3 <= 
        Range2_all_ones_fu_633_p2 when (and_ln631_fu_611_p2(0) = '1') else 
        xor_ln631_fu_599_p2;
    select_ln639_1_fu_737_p3 <= 
        and_ln641_fu_671_p2 when (and_ln639_fu_647_p2(0) = '1') else 
        select_ln642_1_fu_729_p3;
    select_ln639_fu_721_p3 <= 
        Range1_all_ones_fu_653_p2 when (and_ln639_fu_647_p2(0) = '1') else 
        select_ln642_fu_713_p3;
    select_ln642_1_fu_729_p3 <= 
        Range1_all_zeros_fu_665_p2 when (and_ln642_fu_707_p2(0) = '1') else 
        or_ln645_fu_689_p2;
    select_ln642_fu_713_p3 <= 
        Range1_all_ones_1_fu_585_p2 when (and_ln642_fu_707_p2(0) = '1') else 
        xor_ln621_1_fu_559_p2;
        sext_ln581_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(F2_2_fu_281_p3),32));

        sext_ln618_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos1_fu_525_p2),32));

        sext_ln619_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos2_fu_535_p2),32));

    shl_ln604_fu_343_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_303_p1),to_integer(unsigned('0' & trunc_ln581_fu_289_p1(8-1 downto 0)))));
    sub_ln581_fu_275_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(F2_fu_263_p2));
    tmp_1_i_fu_245_p3 <= (ap_const_lv1_1 & tmp_V_3_fu_219_p1);
    tmp_50_fu_313_p4 <= F2_2_fu_281_p3(11 downto 3);
    tmp_52_fu_407_p3 <= p_Val2_15_fu_401_p2(7 downto 7);
    tmp_53_fu_551_p3 <= pos1_fu_525_p2(11 downto 11);
    tmp_54_fu_591_p3 <= pos2_fu_535_p2(11 downto 11);
    tmp_55_fu_817_p3 <= 
        select_ln340_fu_765_p3 when (xor_ln571_fu_811_p2(0) = '1') else 
        select_ln571_fu_797_p3;
    tmp_V_3_fu_219_p1 <= p_Val2_s_fu_202_p1(52 - 1 downto 0);
    tmp_V_fu_209_p4 <= p_Val2_s_fu_202_p1(62 downto 52);
    trunc_ln368_fu_205_p1 <= p_Val2_s_fu_202_p1(63 - 1 downto 0);
    trunc_ln581_fu_289_p1 <= F2_2_fu_281_p3(8 - 1 downto 0);
    trunc_ln583_fu_303_p1 <= p_Val2_s_fu_202_p1(8 - 1 downto 0);
    trunc_ln586_fu_339_p1 <= ashr_ln586_fu_333_p2(8 - 1 downto 0);
    xor_ln403_fu_455_p2 <= (p_Result_7_fu_389_p3 xor ap_const_lv1_1);
    xor_ln416_fu_415_p2 <= (tmp_52_fu_407_p3 xor ap_const_lv1_1);
    xor_ln428_fu_779_p2 <= (ap_const_lv1_1 xor and_ln428_1_fu_773_p2);
    xor_ln571_fu_811_p2 <= (or_ln571_1_fu_805_p2 xor ap_const_lv1_1);
    xor_ln581_fu_481_p2 <= (or_ln581_fu_475_p2 xor ap_const_lv1_1);
    xor_ln582_fu_429_p2 <= (icmp_ln582_fu_297_p2 xor ap_const_lv1_1);
    xor_ln603_fu_501_p2 <= (icmp_ln603_fu_323_p2 xor ap_const_lv1_1);
    xor_ln621_1_fu_559_p2 <= (tmp_53_fu_551_p3 xor ap_const_lv1_1);
    xor_ln621_fu_753_p2 <= (icmp_ln621_fu_545_p2 xor ap_const_lv1_1);
    xor_ln631_fu_599_p2 <= (tmp_54_fu_591_p3 xor ap_const_lv1_1);
    xor_ln639_1_fu_695_p2 <= (icmp_ln631_fu_605_p2 xor ap_const_lv1_1);
    zext_ln415_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_fu_381_p3),8));
    zext_ln461_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_209_p4),12));
    zext_ln586_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_293_p1),54));
    zext_ln591_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln591_fu_363_p2),32));
    zext_ln623_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln618_fu_531_p1),54));
    zext_ln635_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln619_fu_541_p1),54));
end behav;
