-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2D_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of Filter2D_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_43A : STD_LOGIC_VECTOR (10 downto 0) := "10000111010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_438 : STD_LOGIC_VECTOR (11 downto 0) := "010000111000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_FFE : STD_LOGIC_VECTOR (11 downto 0) := "111111111110";
    constant ap_const_lv12_FFD : STD_LOGIC_VECTOR (11 downto 0) := "111111111101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_782 : STD_LOGIC_VECTOR (10 downto 0) := "11110000010";
    constant ap_const_lv12_780 : STD_LOGIC_VECTOR (11 downto 0) := "011110000000";
    constant ap_const_lv13_EFE : STD_LOGIC_VECTOR (12 downto 0) := "0111011111110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv19_3A8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001110101000";
    constant ap_const_lv21_1171 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000101110001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln444_reg_1455 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln118_reg_1464 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_1420 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_1411 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal and_ln512_reg_1498 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln512_reg_1498_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_2_reg_291 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln443_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_312_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_reg_1406 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln887_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln457_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln457_reg_1415 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_1425 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_1429 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_reg_1433 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln493_1_fu_512_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_1_reg_1440 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_2_fu_550_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_2_reg_1445 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_3_fu_588_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_3_reg_1450 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln444_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op146_read_state4 : BOOLEAN;
    signal ap_predicate_op157_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_V_fu_604_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln118_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln458_fu_746_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln458_reg_1468 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln457_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln457_reg_1473 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_buf_0_val_3_addr_reg_1480 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_4_addr_reg_1486 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_5_addr_reg_1492 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln512_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_kernel_win_0_va_6_fu_894_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_6_reg_1502 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_9_reg_1507 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_5_fu_1107_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln703_5_reg_1513 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal k_buf_0_val_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_3_ce0 : STD_LOGIC;
    signal k_buf_0_val_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_3_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_3_ce1 : STD_LOGIC;
    signal k_buf_0_val_3_we1 : STD_LOGIC;
    signal k_buf_0_val_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_4_ce0 : STD_LOGIC;
    signal k_buf_0_val_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_4_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_4_ce1 : STD_LOGIC;
    signal k_buf_0_val_4_we1 : STD_LOGIC;
    signal k_buf_0_val_4_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_5_ce0 : STD_LOGIC;
    signal k_buf_0_val_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_5_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_5_ce1 : STD_LOGIC;
    signal k_buf_0_val_5_we1 : STD_LOGIC;
    signal k_buf_0_val_5_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_reg_280 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln835_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal src_kernel_win_0_va_fu_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_1_fu_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_2_fu_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_7_fu_912_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_3_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_4_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_8_fu_930_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_5_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_s_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_buf_0_val_0_0_fu_802_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_1_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_2_fu_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_3_fu_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_buf_0_val_1_0_fu_821_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_4_fu_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_5_fu_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_buf_0_val_2_0_fu_840_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_330_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln443_fu_302_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln506_fu_368_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_374_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln118_2_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_400_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln142_fu_408_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln139_1_fu_414_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln506_1_fu_432_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln506_2_fu_458_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln147_fu_428_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln144_1_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln507_fu_484_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln506_fu_364_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln118_1_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln507_fu_498_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln507_fu_490_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln507_1_fu_504_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln142_fu_454_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_fu_446_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln118_fu_524_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_fu_530_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_438_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln139_2_fu_534_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln118_1_fu_518_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln118_fu_542_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln142_1_fu_480_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln118_3_fu_562_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln118_1_fu_568_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_16_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln139_3_fu_572_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln118_fu_556_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln118_1_fu_580_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_fu_610_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln444_fu_594_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ImagLoc_x_fu_626_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_636_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_1_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln118_4_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_662_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln142_1_fu_670_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln139_fu_676_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln139_1_fu_688_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln451_fu_632_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln147_fu_698_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln118_2_fu_704_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln118_5_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln118_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln144_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln139_fu_684_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln118_fu_712_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_fu_734_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln144_fu_742_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln891_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln493_fu_785_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_790_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_809_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_828_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_883_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_901_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_919_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_959_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1118_1_fu_971_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1118_1_fu_967_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln1118_2_fu_979_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1118_fu_983_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_fu_989_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1290_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1118_2_fu_1004_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1118_3_fu_1016_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1118_3_fu_1012_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln1118_4_fu_1024_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1118_1_fu_1028_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_1_fu_1034_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1118_4_fu_1046_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1118_5_fu_1058_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1118_6_fu_1054_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln1118_7_fu_1066_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1118_2_fu_1070_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_2_fu_1076_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln703_3_fu_1038_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln703_2_fu_1001_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1307_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln1118_8_fu_1080_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln703_5_fu_1094_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_4_fu_1097_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_2_fu_1088_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln703_6_fu_1103_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln1118_6_fu_1155_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1118_7_fu_1166_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1118_10_fu_1162_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln1118_11_fu_1173_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1118_3_fu_1177_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_3_fu_1183_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1316_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln703_7_fu_1152_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln703_9_fu_1194_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_s_fu_1197_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_23_fu_1213_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_1221_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_1203_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_1231_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_fu_1247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_1225_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_1261_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln777_fu_1255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln777_fu_1269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1290_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1290_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1290_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_fu_1301_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_fu_1301_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1307_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_fu_1301_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1316_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1316_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1316_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_110 : BOOLEAN;
    signal ap_enable_state3_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_136 : BOOLEAN;
    signal ap_enable_state4_pp0_iter1_stage0 : BOOLEAN;
    signal ap_predicate_op151_store_state4 : BOOLEAN;
    signal ap_enable_operation_151 : BOOLEAN;
    signal ap_predicate_op158_store_state4 : BOOLEAN;
    signal ap_enable_operation_158 : BOOLEAN;
    signal ap_enable_operation_112 : BOOLEAN;
    signal ap_enable_operation_140 : BOOLEAN;
    signal ap_predicate_op149_store_state4 : BOOLEAN;
    signal ap_enable_operation_149 : BOOLEAN;
    signal ap_predicate_op156_store_state4 : BOOLEAN;
    signal ap_enable_operation_156 : BOOLEAN;
    signal ap_enable_operation_114 : BOOLEAN;
    signal ap_enable_operation_143 : BOOLEAN;
    signal ap_predicate_op147_store_state4 : BOOLEAN;
    signal ap_enable_operation_147 : BOOLEAN;
    signal ap_predicate_op155_store_state4 : BOOLEAN;
    signal ap_enable_operation_155 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1290_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1290_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1290_p30 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_1307_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1316_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1316_p20 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1118_fu_1301_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_condition_969 : BOOLEAN;

    component sobel_accel_mux_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_accel_ama_aibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component sobel_accel_mul_mjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component sobel_accel_mac_mkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component sobel_accel_mac_mlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component Filter2D_1_k_buf_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    k_buf_0_val_3_U : component Filter2D_1_k_buf_eOg
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_0_val_3_address0,
        ce0 => k_buf_0_val_3_ce0,
        q0 => k_buf_0_val_3_q0,
        address1 => k_buf_0_val_3_address1,
        ce1 => k_buf_0_val_3_ce1,
        we1 => k_buf_0_val_3_we1,
        d1 => p_src_data_stream_V_dout);

    k_buf_0_val_4_U : component Filter2D_1_k_buf_eOg
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_0_val_4_address0,
        ce0 => k_buf_0_val_4_ce0,
        q0 => k_buf_0_val_4_q0,
        address1 => k_buf_0_val_4_address1,
        ce1 => k_buf_0_val_4_ce1,
        we1 => k_buf_0_val_4_we1,
        d1 => k_buf_0_val_4_d1);

    k_buf_0_val_5_U : component Filter2D_1_k_buf_eOg
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_0_val_5_address0,
        ce0 => k_buf_0_val_5_ce0,
        q0 => k_buf_0_val_5_q0,
        address1 => k_buf_0_val_5_address1,
        ce1 => k_buf_0_val_5_ce1,
        we1 => k_buf_0_val_5_we1,
        d1 => k_buf_0_val_5_d1);

    sobel_accel_mux_3hbi_U31 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => right_border_buf_0_s_fu_178,
        din1 => right_border_buf_0_1_fu_182,
        din2 => ap_const_lv8_0,
        din3 => xor_ln493_fu_785_p2,
        dout => tmp_8_fu_790_p5);

    sobel_accel_mux_3hbi_U32 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => right_border_buf_0_3_fu_190,
        din1 => right_border_buf_0_4_fu_194,
        din2 => ap_const_lv8_0,
        din3 => xor_ln493_fu_785_p2,
        dout => tmp_9_fu_809_p5);

    sobel_accel_mux_3hbi_U33 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => right_border_buf_0_5_fu_198,
        din1 => right_border_buf_0_2_fu_186,
        din2 => ap_const_lv8_0,
        din3 => xor_ln493_fu_785_p2,
        dout => tmp_2_fu_828_p5);

    sobel_accel_mux_3hbi_U34 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => col_buf_0_val_0_0_fu_802_p3,
        din1 => col_buf_0_val_1_0_fu_821_p3,
        din2 => col_buf_0_val_2_0_fu_840_p3,
        din3 => xor_ln493_1_reg_1440,
        dout => tmp_3_fu_883_p5);

    sobel_accel_mux_3hbi_U35 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => col_buf_0_val_0_0_fu_802_p3,
        din1 => col_buf_0_val_1_0_fu_821_p3,
        din2 => col_buf_0_val_2_0_fu_840_p3,
        din3 => xor_ln493_2_reg_1445,
        dout => tmp_4_fu_901_p5);

    sobel_accel_mux_3hbi_U36 : component sobel_accel_mux_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => col_buf_0_val_0_0_fu_802_p3,
        din1 => col_buf_0_val_1_0_fu_821_p3,
        din2 => col_buf_0_val_2_0_fu_840_p3,
        din3 => xor_ln493_3_reg_1450,
        dout => tmp_10_fu_919_p5);

    sobel_accel_ama_aibs_U37 : component sobel_accel_ama_aibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 11,
        din3_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        din0 => grp_fu_1290_p0,
        din1 => grp_fu_1290_p1,
        din2 => grp_fu_1290_p2,
        din3 => grp_fu_1290_p3,
        dout => grp_fu_1290_p4);

    sobel_accel_mul_mjbC_U38 : component sobel_accel_mul_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 8,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_fu_1301_p0,
        din1 => mul_ln1118_fu_1301_p1,
        dout => mul_ln1118_fu_1301_p2);

    sobel_accel_mac_mkbM_U39 : component sobel_accel_mac_mkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_1307_p0,
        din1 => grp_fu_1307_p1,
        din2 => mul_ln1118_fu_1301_p2,
        dout => grp_fu_1307_p3);

    sobel_accel_mac_mlbW_U40 : component sobel_accel_mac_mlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        din0 => grp_fu_1316_p0,
        din1 => grp_fu_1316_p1,
        din2 => grp_fu_1316_p2,
        dout => grp_fu_1316_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln444_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln443_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((icmp_ln443_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln443_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_2_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_2_reg_291 <= j_V_fu_604_p2;
            elsif (((icmp_ln443_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_2_reg_291 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_280 <= i_V_reg_1406;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_280 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln512_reg_1498) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln703_5_reg_1513 <= add_ln703_5_fu_1107_p2;
                src_kernel_win_0_va_9_reg_1507 <= src_kernel_win_0_va_fu_154;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln118_reg_1464 <= and_ln118_fu_656_p2;
                and_ln512_reg_1498 <= and_ln512_fu_762_p2;
                k_buf_0_val_3_addr_reg_1480 <= zext_ln835_fu_755_p1(11 - 1 downto 0);
                k_buf_0_val_4_addr_reg_1486 <= zext_ln835_fu_755_p1(11 - 1 downto 0);
                k_buf_0_val_5_addr_reg_1492 <= zext_ln835_fu_755_p1(11 - 1 downto 0);
                or_ln457_reg_1473 <= or_ln457_fu_750_p2;
                trunc_ln458_reg_1468 <= trunc_ln458_fu_746_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln512_reg_1498_pp0_iter1_reg <= and_ln512_reg_1498;
                icmp_ln444_reg_1455 <= icmp_ln444_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_1406 <= i_V_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln443_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln879_1_reg_1429 <= icmp_ln879_1_fu_352_p2;
                icmp_ln879_reg_1425 <= icmp_ln879_fu_346_p2;
                icmp_ln887_reg_1411 <= icmp_ln887_fu_318_p2;
                icmp_ln899_1_reg_1433 <= icmp_ln899_1_fu_358_p2;
                icmp_ln899_reg_1420 <= icmp_ln899_fu_340_p2;
                xor_ln457_reg_1415 <= xor_ln457_fu_324_p2;
                xor_ln493_1_reg_1440 <= xor_ln493_1_fu_512_p2;
                xor_ln493_2_reg_1445 <= xor_ln493_2_fu_550_p2;
                xor_ln493_3_reg_1450 <= xor_ln493_3_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                right_border_buf_0_1_fu_182 <= right_border_buf_0_s_fu_178;
                right_border_buf_0_2_fu_186 <= right_border_buf_0_5_fu_198;
                right_border_buf_0_3_fu_190 <= col_buf_0_val_1_0_fu_821_p3;
                right_border_buf_0_4_fu_194 <= right_border_buf_0_3_fu_190;
                right_border_buf_0_5_fu_198 <= col_buf_0_val_2_0_fu_840_p3;
                right_border_buf_0_s_fu_178 <= col_buf_0_val_0_0_fu_802_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_kernel_win_0_va_1_fu_158 <= src_kernel_win_0_va_fu_154;
                src_kernel_win_0_va_2_fu_162 <= src_kernel_win_0_va_7_fu_912_p3;
                src_kernel_win_0_va_3_fu_166 <= src_kernel_win_0_va_2_fu_162;
                src_kernel_win_0_va_4_fu_170 <= src_kernel_win_0_va_8_fu_930_p3;
                src_kernel_win_0_va_5_fu_174 <= src_kernel_win_0_va_4_fu_170;
                src_kernel_win_0_va_fu_154 <= src_kernel_win_0_va_6_fu_894_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_kernel_win_0_va_6_reg_1502 <= src_kernel_win_0_va_6_fu_894_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln443_fu_306_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln443_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ImagLoc_x_fu_626_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(zext_ln444_fu_594_p1));
    Range1_all_zeros_fu_1241_p2 <= "1" when (tmp_11_fu_1231_p4 = ap_const_lv5_0) else "0";
    add_ln118_fu_556_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln506_fu_364_p1));
    add_ln506_1_fu_432_p2 <= std_logic_vector(signed(ap_const_lv12_FFE) + signed(zext_ln443_fu_302_p1));
    add_ln506_2_fu_458_p2 <= std_logic_vector(signed(ap_const_lv12_FFD) + signed(zext_ln443_fu_302_p1));
    add_ln506_fu_368_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(zext_ln443_fu_302_p1));
    add_ln507_fu_498_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln506_fu_364_p1));
    add_ln703_2_fu_1088_p2 <= std_logic_vector(unsigned(zext_ln703_3_fu_1038_p1) + unsigned(zext_ln703_2_fu_1001_p1));
    add_ln703_4_fu_1097_p2 <= std_logic_vector(unsigned(zext_ln1118_8_fu_1080_p1) + unsigned(zext_ln703_5_fu_1094_p1));
    add_ln703_5_fu_1107_p2 <= std_logic_vector(unsigned(add_ln703_2_fu_1088_p2) + unsigned(zext_ln703_6_fu_1103_p1));
    and_ln118_1_fu_394_p2 <= (xor_ln118_2_fu_382_p2 and icmp_ln118_fu_388_p2);
    and_ln118_fu_656_p2 <= (xor_ln118_4_fu_644_p2 and icmp_ln118_1_fu_650_p2);
    and_ln144_fu_728_p2 <= (or_ln118_fu_722_p2 and icmp_ln144_fu_692_p2);
    and_ln512_fu_762_p2 <= (icmp_ln899_reg_1420 and icmp_ln891_fu_620_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, and_ln512_reg_1498_pp0_iter1_reg, ap_predicate_op146_read_state4, ap_predicate_op157_read_state4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_lv1_1 = and_ln512_reg_1498_pp0_iter1_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op157_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op146_read_state4 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, and_ln512_reg_1498_pp0_iter1_reg, ap_predicate_op146_read_state4, ap_predicate_op157_read_state4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = and_ln512_reg_1498_pp0_iter1_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op157_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op146_read_state4 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, and_ln512_reg_1498_pp0_iter1_reg, ap_predicate_op146_read_state4, ap_predicate_op157_read_state4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = and_ln512_reg_1498_pp0_iter1_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op157_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op146_read_state4 = ap_const_boolean_1)))));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_V_empty_n, ap_predicate_op146_read_state4, ap_predicate_op157_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op157_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op146_read_state4 = ap_const_boolean_1)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(p_dst_data_stream_V_full_n, and_ln512_reg_1498_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((ap_const_lv1_1 = and_ln512_reg_1498_pp0_iter1_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_969_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln444_reg_1455, and_ln118_reg_1464)
    begin
                ap_condition_969 <= ((ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln443_fu_306_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln443_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_110_assign_proc : process(icmp_ln444_fu_598_p2)
    begin
                ap_enable_operation_110 <= (icmp_ln444_fu_598_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_112_assign_proc : process(icmp_ln444_fu_598_p2)
    begin
                ap_enable_operation_112 <= (icmp_ln444_fu_598_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_114_assign_proc : process(icmp_ln444_fu_598_p2)
    begin
                ap_enable_operation_114 <= (icmp_ln444_fu_598_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_136_assign_proc : process(icmp_ln444_reg_1455)
    begin
                ap_enable_operation_136 <= (icmp_ln444_reg_1455 = ap_const_lv1_0);
    end process;


    ap_enable_operation_140_assign_proc : process(icmp_ln444_reg_1455)
    begin
                ap_enable_operation_140 <= (icmp_ln444_reg_1455 = ap_const_lv1_0);
    end process;


    ap_enable_operation_143_assign_proc : process(icmp_ln444_reg_1455)
    begin
                ap_enable_operation_143 <= (icmp_ln444_reg_1455 = ap_const_lv1_0);
    end process;


    ap_enable_operation_147_assign_proc : process(ap_predicate_op147_store_state4)
    begin
                ap_enable_operation_147 <= (ap_predicate_op147_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_149_assign_proc : process(ap_predicate_op149_store_state4)
    begin
                ap_enable_operation_149 <= (ap_predicate_op149_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_151_assign_proc : process(ap_predicate_op151_store_state4)
    begin
                ap_enable_operation_151 <= (ap_predicate_op151_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_155_assign_proc : process(ap_predicate_op155_store_state4)
    begin
                ap_enable_operation_155 <= (ap_predicate_op155_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_156_assign_proc : process(ap_predicate_op156_store_state4)
    begin
                ap_enable_operation_156 <= (ap_predicate_op156_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_158_assign_proc : process(ap_predicate_op158_store_state4)
    begin
                ap_enable_operation_158 <= (ap_predicate_op158_store_state4 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state3_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state3_pp0_iter0_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_enable_state4_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state4_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op146_read_state4_assign_proc : process(icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420)
    begin
                ap_predicate_op146_read_state4 <= ((ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0));
    end process;


    ap_predicate_op147_store_state4_assign_proc : process(icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln879_reg_1425)
    begin
                ap_predicate_op147_store_state4 <= ((icmp_ln879_reg_1425 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0));
    end process;


    ap_predicate_op149_store_state4_assign_proc : process(icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln879_1_reg_1429)
    begin
                ap_predicate_op149_store_state4 <= ((icmp_ln879_1_reg_1429 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0));
    end process;


    ap_predicate_op151_store_state4_assign_proc : process(icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln879_reg_1425)
    begin
                ap_predicate_op151_store_state4 <= ((icmp_ln879_reg_1425 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0));
    end process;


    ap_predicate_op155_store_state4_assign_proc : process(icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411)
    begin
                ap_predicate_op155_store_state4 <= ((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0));
    end process;


    ap_predicate_op156_store_state4_assign_proc : process(icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411)
    begin
                ap_predicate_op156_store_state4 <= ((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0));
    end process;


    ap_predicate_op157_read_state4_assign_proc : process(icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411)
    begin
                ap_predicate_op157_read_state4 <= ((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0));
    end process;


    ap_predicate_op158_store_state4_assign_proc : process(icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411)
    begin
                ap_predicate_op158_store_state4 <= ((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(icmp_ln443_fu_306_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln443_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_buf_0_val_0_0_fu_802_p3 <= 
        k_buf_0_val_3_q0 when (or_ln457_reg_1473(0) = '1') else 
        tmp_8_fu_790_p5;
    col_buf_0_val_1_0_fu_821_p3 <= 
        k_buf_0_val_4_q0 when (or_ln457_reg_1473(0) = '1') else 
        tmp_9_fu_809_p5;
    col_buf_0_val_2_0_fu_840_p3 <= 
        k_buf_0_val_5_q0 when (or_ln457_reg_1473(0) = '1') else 
        tmp_2_fu_828_p5;
    deleted_zeros_fu_1275_p2 <= (or_ln777_fu_1269_p2 and Range1_all_zeros_fu_1241_p2);
    grp_fu_1290_p0 <= grp_fu_1290_p00(8 - 1 downto 0);
    grp_fu_1290_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_8_fu_930_p3),9));
    grp_fu_1290_p1 <= grp_fu_1290_p10(8 - 1 downto 0);
    grp_fu_1290_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_5_fu_174),9));
    grp_fu_1290_p2 <= ap_const_lv19_3A8(11 - 1 downto 0);
    grp_fu_1290_p3 <= grp_fu_1290_p30(24 - 1 downto 0);
    grp_fu_1290_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_fu_989_p1),25));
    grp_fu_1307_p0 <= ap_const_lv19_3A8(11 - 1 downto 0);
    grp_fu_1307_p1 <= grp_fu_1307_p10(8 - 1 downto 0);
    grp_fu_1307_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_1_fu_158),19));
    grp_fu_1316_p0 <= ap_const_lv19_3A8(11 - 1 downto 0);
    grp_fu_1316_p1 <= grp_fu_1316_p10(8 - 1 downto 0);
    grp_fu_1316_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_6_reg_1502),19));
    grp_fu_1316_p2 <= grp_fu_1316_p20(24 - 1 downto 0);
    grp_fu_1316_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_3_fu_1183_p1),25));
    i_V_fu_312_p2 <= std_logic_vector(unsigned(t_V_reg_280) + unsigned(ap_const_lv11_1));
    icmp_ln118_1_fu_650_p2 <= "1" when (signed(ImagLoc_x_fu_626_p2) < signed(ap_const_lv12_780)) else "0";
    icmp_ln118_fu_388_p2 <= "1" when (signed(add_ln506_fu_368_p2) < signed(ap_const_lv12_438)) else "0";
    icmp_ln144_1_fu_422_p2 <= "1" when (signed(select_ln139_1_fu_414_p3) < signed(ap_const_lv12_438)) else "0";
    icmp_ln144_fu_692_p2 <= "1" when (signed(select_ln139_fu_676_p3) < signed(ap_const_lv12_780)) else "0";
    icmp_ln443_fu_306_p2 <= "1" when (t_V_reg_280 = ap_const_lv11_43A) else "0";
    icmp_ln444_fu_598_p2 <= "1" when (t_V_2_reg_291 = ap_const_lv11_782) else "0";
    icmp_ln879_1_fu_352_p2 <= "1" when (t_V_reg_280 = ap_const_lv11_0) else "0";
    icmp_ln879_fu_346_p2 <= "1" when (t_V_reg_280 = ap_const_lv11_1) else "0";
    icmp_ln887_fu_318_p2 <= "1" when (unsigned(t_V_reg_280) < unsigned(ap_const_lv11_438)) else "0";
    icmp_ln891_fu_620_p2 <= "0" when (tmp_18_fu_610_p4 = ap_const_lv10_0) else "1";
    icmp_ln899_1_fu_358_p2 <= "1" when (unsigned(t_V_reg_280) > unsigned(ap_const_lv11_438)) else "0";
    icmp_ln899_fu_340_p2 <= "0" when (tmp_fu_330_p4 = ap_const_lv10_0) else "1";
    j_V_fu_604_p2 <= std_logic_vector(unsigned(t_V_2_reg_291) + unsigned(ap_const_lv11_1));
    k_buf_0_val_3_address0 <= zext_ln835_fu_755_p1(11 - 1 downto 0);
    k_buf_0_val_3_address1 <= k_buf_0_val_3_addr_reg_1480;

    k_buf_0_val_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_0_val_3_ce0 <= ap_const_logic_1;
        else 
            k_buf_0_val_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411, icmp_ln879_reg_1425, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_reg_1425 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_3_ce1 <= ap_const_logic_1;
        else 
            k_buf_0_val_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_3_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411, icmp_ln879_reg_1425, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_reg_1425 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_3_we1 <= ap_const_logic_1;
        else 
            k_buf_0_val_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    k_buf_0_val_4_address0 <= zext_ln835_fu_755_p1(11 - 1 downto 0);
    k_buf_0_val_4_address1 <= k_buf_0_val_4_addr_reg_1486;

    k_buf_0_val_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_0_val_4_ce0 <= ap_const_logic_1;
        else 
            k_buf_0_val_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411, icmp_ln879_1_reg_1429, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_1_reg_1429 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_4_ce1 <= ap_const_logic_1;
        else 
            k_buf_0_val_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_4_d1_assign_proc : process(p_src_data_stream_V_dout, icmp_ln899_reg_1420, icmp_ln887_reg_1411, icmp_ln879_1_reg_1429, k_buf_0_val_3_q0, ap_condition_969)
    begin
        if ((ap_const_boolean_1 = ap_condition_969)) then
            if (((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1))) then 
                k_buf_0_val_4_d1 <= k_buf_0_val_3_q0;
            elsif (((icmp_ln879_1_reg_1429 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_0))) then 
                k_buf_0_val_4_d1 <= p_src_data_stream_V_dout;
            else 
                k_buf_0_val_4_d1 <= "XXXXXXXX";
            end if;
        else 
            k_buf_0_val_4_d1 <= "XXXXXXXX";
        end if; 
    end process;


    k_buf_0_val_4_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411, icmp_ln879_1_reg_1429, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_1_reg_1429 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_4_we1 <= ap_const_logic_1;
        else 
            k_buf_0_val_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    k_buf_0_val_5_address0 <= zext_ln835_fu_755_p1(11 - 1 downto 0);
    k_buf_0_val_5_address1 <= k_buf_0_val_5_addr_reg_1492;

    k_buf_0_val_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_0_val_5_ce0 <= ap_const_logic_1;
        else 
            k_buf_0_val_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411, icmp_ln879_reg_1425, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_reg_1425 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_5_ce1 <= ap_const_logic_1;
        else 
            k_buf_0_val_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_5_d1_assign_proc : process(p_src_data_stream_V_dout, icmp_ln899_reg_1420, icmp_ln887_reg_1411, icmp_ln879_reg_1425, k_buf_0_val_4_q0, ap_condition_969)
    begin
        if ((ap_const_boolean_1 = ap_condition_969)) then
            if (((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1))) then 
                k_buf_0_val_5_d1 <= k_buf_0_val_4_q0;
            elsif (((icmp_ln879_reg_1425 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_0))) then 
                k_buf_0_val_5_d1 <= p_src_data_stream_V_dout;
            else 
                k_buf_0_val_5_d1 <= "XXXXXXXX";
            end if;
        else 
            k_buf_0_val_5_d1 <= "XXXXXXXX";
        end if; 
    end process;


    k_buf_0_val_5_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411, icmp_ln879_reg_1425, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln879_reg_1425 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_5_we1 <= ap_const_logic_1;
        else 
            k_buf_0_val_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_fu_1301_p0 <= ap_const_lv21_1171(14 - 1 downto 0);
    mul_ln1118_fu_1301_p1 <= mul_ln1118_fu_1301_p10(8 - 1 downto 0);
    mul_ln1118_fu_1301_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_kernel_win_0_va_2_fu_162),21));
    or_ln118_fu_722_p2 <= (xor_ln118_5_fu_716_p2 or tmp_19_fu_636_p3);
    or_ln457_fu_750_p2 <= (xor_ln457_reg_1415 or icmp_ln118_1_fu_650_p2);
    or_ln777_fu_1269_p2 <= (xor_ln777_fu_1255_p2 or tmp_25_fu_1261_p3);
    p_Val2_1_fu_1203_p4 <= p_Val2_s_fu_1197_p2(21 downto 14);
    p_Val2_2_fu_1225_p2 <= std_logic_vector(unsigned(zext_ln415_fu_1221_p1) + unsigned(p_Val2_1_fu_1203_p4));
    p_Val2_s_fu_1197_p2 <= std_logic_vector(unsigned(zext_ln703_7_fu_1152_p1) + unsigned(zext_ln703_9_fu_1194_p1));

    p_dst_data_stream_V_blk_n_assign_proc : process(p_dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln512_reg_1498_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln512_reg_1498_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dst_data_stream_V_blk_n <= p_dst_data_stream_V_full_n;
        else 
            p_dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_V_din <= 
        p_Val2_2_fu_1225_p2 when (deleted_zeros_fu_1275_p2(0) = '1') else 
        ap_const_lv8_FF;

    p_dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln512_reg_1498_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln512_reg_1498_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_stream_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_V_blk_n_assign_proc : process(p_src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln444_reg_1455, and_ln118_reg_1464, icmp_ln899_reg_1420, icmp_ln887_reg_1411)
    begin
        if ((((icmp_ln887_reg_1411 = ap_const_lv1_1) and (icmp_ln899_reg_1420 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_lv1_1 = and_ln118_reg_1464) and (icmp_ln899_reg_1420 = ap_const_lv1_0) and (icmp_ln444_reg_1455 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_src_data_stream_V_blk_n <= p_src_data_stream_V_empty_n;
        else 
            p_src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op146_read_state4, ap_predicate_op157_read_state4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op157_read_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op146_read_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            p_src_data_stream_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln118_1_fu_580_p3 <= 
        select_ln139_3_fu_572_p3 when (tmp_16_fu_464_p3(0) = '1') else 
        add_ln118_fu_556_p2;
    select_ln118_2_fu_704_p3 <= 
        sext_ln451_fu_632_p1 when (and_ln118_fu_656_p2(0) = '1') else 
        sub_ln147_fu_698_p2;
    select_ln118_fu_542_p3 <= 
        select_ln139_2_fu_534_p3 when (tmp_7_fu_438_p3(0) = '1') else 
        xor_ln118_1_fu_518_p2;
    select_ln139_1_fu_414_p3 <= 
        sub_ln142_fu_408_p2 when (tmp_6_fu_400_p3(0) = '1') else 
        add_ln506_fu_368_p2;
    select_ln139_2_fu_534_p3 <= 
        sub_ln118_fu_524_p2 when (tmp_15_fu_446_p3(0) = '1') else 
        trunc_ln118_fu_530_p1;
    select_ln139_3_fu_572_p3 <= 
        xor_ln118_3_fu_562_p2 when (tmp_17_fu_472_p3(0) = '1') else 
        trunc_ln118_1_fu_568_p1;
    select_ln139_fu_676_p3 <= 
        sub_ln142_1_fu_670_p2 when (tmp_20_fu_662_p3(0) = '1') else 
        ImagLoc_x_fu_626_p2;
    select_ln507_1_fu_504_p3 <= 
        add_ln507_fu_498_p2 when (and_ln118_1_fu_394_p2(0) = '1') else 
        select_ln507_fu_490_p3;
    select_ln507_fu_490_p3 <= 
        trunc_ln147_fu_428_p1 when (icmp_ln144_1_fu_422_p2(0) = '1') else 
        sub_ln507_fu_484_p2;
        sext_ln1118_1_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1118_1_fu_1028_p2),24));

        sext_ln1118_2_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1118_2_fu_1070_p2),24));

        sext_ln1118_3_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1118_3_fu_1177_p2),24));

        sext_ln1118_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1118_fu_983_p2),24));

        sext_ln139_1_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln139_fu_676_p3),13));

        sext_ln139_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln139_fu_676_p3),14));

        sext_ln144_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_fu_734_p3),32));

        sext_ln451_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ImagLoc_x_fu_626_p2),13));

    shl_ln1118_1_fu_971_p3 <= (src_kernel_win_0_va_4_fu_170 & ap_const_lv2_0);
    shl_ln1118_2_fu_1004_p3 <= (src_kernel_win_0_va_3_fu_166 & ap_const_lv11_0);
    shl_ln1118_3_fu_1016_p3 <= (src_kernel_win_0_va_3_fu_166 & ap_const_lv2_0);
    shl_ln1118_4_fu_1046_p3 <= (src_kernel_win_0_va_7_fu_912_p3 & ap_const_lv11_0);
    shl_ln1118_5_fu_1058_p3 <= (src_kernel_win_0_va_7_fu_912_p3 & ap_const_lv2_0);
    shl_ln1118_6_fu_1155_p3 <= (src_kernel_win_0_va_9_reg_1507 & ap_const_lv11_0);
    shl_ln1118_7_fu_1166_p3 <= (src_kernel_win_0_va_9_reg_1507 & ap_const_lv2_0);
    shl_ln_fu_959_p3 <= (src_kernel_win_0_va_4_fu_170 & ap_const_lv11_0);
    src_kernel_win_0_va_6_fu_894_p3 <= 
        tmp_3_fu_883_p5 when (icmp_ln899_1_reg_1433(0) = '1') else 
        col_buf_0_val_0_0_fu_802_p3;
    src_kernel_win_0_va_7_fu_912_p3 <= 
        tmp_4_fu_901_p5 when (icmp_ln899_1_reg_1433(0) = '1') else 
        col_buf_0_val_1_0_fu_821_p3;
    src_kernel_win_0_va_8_fu_930_p3 <= 
        tmp_10_fu_919_p5 when (icmp_ln899_1_reg_1433(0) = '1') else 
        col_buf_0_val_2_0_fu_840_p3;
    sub_ln1118_1_fu_1028_p2 <= std_logic_vector(unsigned(zext_ln1118_3_fu_1012_p1) - unsigned(zext_ln1118_4_fu_1024_p1));
    sub_ln1118_2_fu_1070_p2 <= std_logic_vector(unsigned(zext_ln1118_6_fu_1054_p1) - unsigned(zext_ln1118_7_fu_1066_p1));
    sub_ln1118_3_fu_1177_p2 <= std_logic_vector(unsigned(zext_ln1118_10_fu_1162_p1) - unsigned(zext_ln1118_11_fu_1173_p1));
    sub_ln1118_fu_983_p2 <= std_logic_vector(unsigned(zext_ln1118_1_fu_967_p1) - unsigned(zext_ln1118_2_fu_979_p1));
    sub_ln118_fu_524_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(trunc_ln142_fu_454_p1));
    sub_ln142_1_fu_670_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) - unsigned(zext_ln444_fu_594_p1));
    sub_ln142_fu_408_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) - unsigned(zext_ln443_fu_302_p1));
    sub_ln147_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv13_EFE) - unsigned(sext_ln139_1_fu_688_p1));
    sub_ln507_fu_484_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(trunc_ln147_fu_428_p1));
    tmp_11_fu_1231_p4 <= p_Val2_s_fu_1197_p2(26 downto 22);
    tmp_15_fu_446_p3 <= add_ln506_1_fu_432_p2(11 downto 11);
    tmp_16_fu_464_p3 <= add_ln506_2_fu_458_p2(11 downto 11);
    tmp_17_fu_472_p3 <= add_ln506_2_fu_458_p2(11 downto 11);
    tmp_18_fu_610_p4 <= t_V_2_reg_291(10 downto 1);
    tmp_19_fu_636_p3 <= ImagLoc_x_fu_626_p2(11 downto 11);
    tmp_20_fu_662_p3 <= ImagLoc_x_fu_626_p2(11 downto 11);
    tmp_23_fu_1213_p3 <= p_Val2_s_fu_1197_p2(13 downto 13);
    tmp_24_fu_1247_p3 <= p_Val2_s_fu_1197_p2(21 downto 21);
    tmp_25_fu_1261_p3 <= p_Val2_2_fu_1225_p2(7 downto 7);
    tmp_5_fu_374_p3 <= add_ln506_fu_368_p2(11 downto 11);
    tmp_6_fu_400_p3 <= add_ln506_fu_368_p2(11 downto 11);
    tmp_7_fu_438_p3 <= add_ln506_1_fu_432_p2(11 downto 11);
    tmp_fu_330_p4 <= t_V_reg_280(10 downto 1);
    trunc_ln118_1_fu_568_p1 <= add_ln506_2_fu_458_p2(2 - 1 downto 0);
    trunc_ln118_fu_530_p1 <= add_ln506_1_fu_432_p2(2 - 1 downto 0);
    trunc_ln142_1_fu_480_p1 <= t_V_reg_280(2 - 1 downto 0);
    trunc_ln142_fu_454_p1 <= t_V_reg_280(2 - 1 downto 0);
    trunc_ln147_fu_428_p1 <= select_ln139_1_fu_414_p3(2 - 1 downto 0);
    trunc_ln458_fu_746_p1 <= x_fu_734_p3(2 - 1 downto 0);
    trunc_ln506_fu_364_p1 <= t_V_reg_280(2 - 1 downto 0);
    x_fu_734_p3 <= 
        sext_ln139_fu_684_p1 when (and_ln144_fu_728_p2(0) = '1') else 
        zext_ln118_fu_712_p1;
    xor_ln118_1_fu_518_p2 <= (trunc_ln506_fu_364_p1 xor ap_const_lv2_2);
    xor_ln118_2_fu_382_p2 <= (tmp_5_fu_374_p3 xor ap_const_lv1_1);
    xor_ln118_3_fu_562_p2 <= (trunc_ln142_1_fu_480_p1 xor ap_const_lv2_3);
    xor_ln118_4_fu_644_p2 <= (tmp_19_fu_636_p3 xor ap_const_lv1_1);
    xor_ln118_5_fu_716_p2 <= (icmp_ln118_1_fu_650_p2 xor ap_const_lv1_1);
    xor_ln457_fu_324_p2 <= (icmp_ln887_fu_318_p2 xor ap_const_lv1_1);
    xor_ln493_1_fu_512_p2 <= (select_ln507_1_fu_504_p3 xor ap_const_lv2_3);
    xor_ln493_2_fu_550_p2 <= (select_ln118_fu_542_p3 xor ap_const_lv2_3);
    xor_ln493_3_fu_588_p2 <= (select_ln118_1_fu_580_p3 xor ap_const_lv2_3);
    xor_ln493_fu_785_p2 <= (trunc_ln458_reg_1468 xor ap_const_lv2_3);
    xor_ln777_fu_1255_p2 <= (tmp_24_fu_1247_p3 xor ap_const_lv1_1);
    zext_ln1118_10_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1118_6_fu_1155_p3),20));
    zext_ln1118_11_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1118_7_fu_1166_p3),20));
    zext_ln1118_1_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_959_p3),20));
    zext_ln1118_2_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1118_1_fu_971_p3),20));
    zext_ln1118_3_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1118_2_fu_1004_p3),20));
    zext_ln1118_4_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1118_3_fu_1016_p3),20));
    zext_ln1118_6_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1118_4_fu_1046_p3),20));
    zext_ln1118_7_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1118_5_fu_1058_p3),20));
    zext_ln1118_8_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_2_fu_1076_p1),25));
    zext_ln118_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln118_2_fu_704_p3),14));
    zext_ln415_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_1213_p3),8));
    zext_ln443_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_280),12));
    zext_ln444_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_291),12));
    zext_ln703_2_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1290_p4),26));
    zext_ln703_3_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_1_fu_1034_p1),26));
    zext_ln703_5_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1307_p3),25));
    zext_ln703_6_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_4_fu_1097_p2),26));
    zext_ln703_7_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_5_reg_1513),27));
    zext_ln703_9_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1316_p3),27));
    zext_ln835_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln144_fu_742_p1),64));
end behav;
